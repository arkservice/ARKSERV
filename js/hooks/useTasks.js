// Hook personnalis√© pour les t√¢ches avec temps r√©el
function useTasks() {
    const { useState, useEffect, useCallback } = React;
    const supabase = window.supabaseConfig.client;
    const { user } = window.useAuth();
    // TEMPORAIRE: D√©sactivation du temps r√©el pour r√©soudre l'erreur 529
    // const { createChannel, removeChannel } = window.useRealtime();
    
    const [tasks, setTasks] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    
    const fetchTasks = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);
            
            const { data, error: fetchError } = await supabase
                .from('tasks')
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .order('workflow_order', { ascending: true })
                .order('created_at', { ascending: false });
            
            if (fetchError) throw fetchError;
            setTasks(data || []);
        } catch (err) {
            console.error('Erreur lors du chargement des t√¢ches:', err);
            setError(err.message);
        } finally {
            setLoading(false);
        }
    }, []);
    
    // TEMPORAIRE: Fonction pour g√©rer les mises √† jour temps r√©el (d√©sactiv√©e)
    /*
    const handleRealtimeChange = useCallback(async (payload) => {
        const { eventType, new: newRecord, old: oldRecord } = payload;
        
        // Pour les changements, nous devons re-fetch les donn√©es avec les relations
        // car le payload temps r√©el ne contient que les donn√©es de base
        if (eventType === 'INSERT' || eventType === 'UPDATE') {
            try {
                const { data: fullRecord } = await supabase
                    .from('tasks')
                    .select(`
                        *,
                        project:project_id(id, name, 
                            entreprise:entreprise_id(id, nom, adresse)
                        ),
                        assigned_user:assigned_to(id, prenom, nom),
                        created_user:created_by(id, prenom, nom)
                    `)
                    .eq('id', newRecord.id)
                    .single();
                
                setTasks(current => {
                    if (eventType === 'INSERT') {
                        // Ajouter la nouvelle t√¢che si elle n'existe pas d√©j√†
                        if (!current.find(t => t.id === fullRecord.id)) {
                            return [fullRecord, ...current];
                        }
                        return current;
                    } else {
                        // Mettre √† jour la t√¢che existante
                        return current.map(t => 
                            t.id === fullRecord.id ? fullRecord : t
                        );
                    }
                });
            } catch (err) {
                console.error('Erreur lors du fetch des d√©tails de la t√¢che:', err);
            }
        } else if (eventType === 'DELETE') {
            setTasks(current => current.filter(t => t.id !== oldRecord.id));
        }
    }, [supabase]);
    */
    
    const createTask = async (task) => {
        try {
            setError(null);
            const { data, error: insertError } = await supabase
                .from('tasks')
                .insert({
                    ...task,
                    created_by: user?.id || null
                })
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (insertError) throw insertError;
            // TEMPORAIRE: Rafra√Æchir manuellement (temps r√©el d√©sactiv√©)
            await fetchTasks();
            return data;
        } catch (err) {
            console.error('Erreur lors de la cr√©ation:', err);
            setError(err.message);
            throw err;
        }
    };
    
    const updateTask = async (id, updates) => {
        try {
            setError(null);
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update(updates)
                .eq('id', id)
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (updateError) throw updateError;
            // TEMPORAIRE: Rafra√Æchir manuellement (temps r√©el d√©sactiv√©)
            await fetchTasks();
            return data;
        } catch (err) {
            console.error('Erreur lors de la mise √† jour:', err);
            setError(err.message);
            throw err;
        }
    };
    
    const deleteTask = async (id) => {
        try {
            setError(null);
            const { error: deleteError } = await supabase
                .from('tasks')
                .delete()
                .eq('id', id);
            
            if (deleteError) throw deleteError;
            // TEMPORAIRE: Rafra√Æchir manuellement (temps r√©el d√©sactiv√©)
            await fetchTasks();
        } catch (err) {
            console.error('Erreur lors de la suppression:', err);
            setError(err.message);
            throw err;
        }
    };
    
    // Fonction pour mettre √† jour uniquement la description d'une t√¢che
    const updateTaskDescription = async (taskId, newDescription) => {
        try {
            console.log(`üîÑ [updateTaskDescription] Mise √† jour description t√¢che ${taskId}:`, newDescription);
            setError(null);
            
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update({ 
                    description: newDescription,
                    updated_at: new Date().toISOString()
                })
                .eq('id', taskId)
                .select()
                .single();
            
            if (updateError) throw updateError;
            
            console.log("‚úÖ [updateTaskDescription] Description mise √† jour avec succ√®s:", data);
            return data;
        } catch (err) {
            console.error('‚ùå [updateTaskDescription] Erreur lors de la mise √† jour de la description:', err);
            setError(err.message);
            throw err;
        }
    };
    
    const completeTask = async (taskId) => {
        try {
            setError(null);
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update({ 
                    status: 'completed',
                    updated_at: new Date().toISOString()
                })
                .eq('id', taskId)
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (updateError) throw updateError;
            return data;
        } catch (err) {
            console.error('Erreur lors de la completion de la t√¢che:', err);
            setError(err.message);
            throw err;
        }
    };

    const autoCompleteQualificationTask = async (projectId, pdcData) => {
        try {
            setError(null);
            console.log(`üîß [autoCompleteQualificationTask] Recherche t√¢che "Qualification" pour projet ${projectId}`);
            
            // Chercher la t√¢che "Qualification" pour ce projet (sans crit√®re de statut)
            const { data: qualificationTask, error: findError } = await supabase
                .from('tasks')
                .select('id, title, status, assigned_to')
                .eq('project_id', projectId)
                .eq('title', 'Qualification')
                .eq('workflow_order', 2)
                .single();
            
            if (findError) {
                if (findError.code === 'PGRST116') {
                    console.log('Aucune t√¢che "Qualification" trouv√©e pour ce projet');
                    return null;
                } else {
                    throw findError;
                }
            }
            
            console.log(`‚úÖ [autoCompleteQualificationTask] T√¢che "Qualification" trouv√©e:`, qualificationTask);
            console.log(`üîç [autoCompleteQualificationTask] Assignation actuelle: ${qualificationTask.assigned_to}`);
            
            // Cr√©er la description personnalis√©e (courte pour l'affichage dans les tableaux)
            const pdcNumber = pdcData.pdc_number || 'N/A';
            
            const newDescription = `Plan de formation s√©lectionn√© par le client. PDC N¬∞${pdcNumber}`;
            console.log(`üìù [autoCompleteQualificationTask] Nouvelle description: ${newDescription}`);
            console.log(`üö´ [autoCompleteQualificationTask] R√©initialisation de l'assignation (assigned_to: null)`);
            
            // Marquer la t√¢che comme termin√©e avec la nouvelle description (r√©initialiser l'assignation)
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update({ 
                    status: 'completed',
                    description: newDescription,
                    assigned_to: null, // R√©initialiser l'assignation car le client a choisi lui-m√™me
                    updated_at: new Date().toISOString()
                })
                .eq('id', qualificationTask.id)
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (updateError) throw updateError;
            
            console.log(`‚úÖ T√¢che "Qualification" automatiquement marqu√©e comme termin√©e pour le projet ${projectId}`);
            console.log(`‚úÖ [autoCompleteQualificationTask] Assignation finale: ${data.assigned_to} (devrait √™tre null)`);
            console.log(`‚úÖ [autoCompleteQualificationTask] Statut final: ${data.status}`);
            return data;
            
        } catch (err) {
            console.error('Erreur lors de l\'auto-compl√©tion de la t√¢che Qualification:', err);
            setError(err.message);
            throw err;
        }
    };

    const autoCompleteDevisTask = async (projectId, devisUrl) => {
        try {
            setError(null);
            console.log(`üîß [autoCompleteDevisTask] Recherche t√¢che "Devis" pour projet ${projectId}`);
            
            // Chercher la t√¢che "Devis" pour ce projet
            const { data: devisTask, error: findError } = await supabase
                .from('tasks')
                .select('id, title, status, workflow_order')
                .eq('project_id', projectId)
                .eq('title', 'Devis')
                .eq('workflow_order', 3)
                .in('status', ['todo', 'in_progress'])
                .single();
            
            if (findError) {
                console.log('Aucune t√¢che "Devis" en attente trouv√©e pour ce projet:', findError);
                return null;
            }
            
            // Cr√©er la description personnalis√©e
            const newDescription = `Devis upload√© avec succ√®s. Document disponible en pi√®ce jointe.`;
            
            // Marquer la t√¢che comme termin√©e avec la nouvelle description
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update({ 
                    status: 'completed',
                    description: newDescription,
                    updated_at: new Date().toISOString()
                })
                .eq('id', devisTask.id)
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (updateError) throw updateError;
            
            console.log(`‚úÖ T√¢che "Devis" automatiquement marqu√©e comme termin√©e pour le projet ${projectId}`);
            
            // Auto-d√©verrouiller la t√¢che suivante "Validation du devis"
            await autoUnlockValidationTask(projectId);
            
            return data;
            
        } catch (err) {
            console.error('Erreur lors de l\'auto-compl√©tion de la t√¢che Devis:', err);
            setError(err.message);
            throw err;
        }
    };

    const autoUnlockValidationTask = async (projectId) => {
        try {
            console.log(`üîß [autoUnlockValidationTask] Recherche t√¢che "Validation du devis" pour projet ${projectId}`);
            
            // V√©rifier que la t√¢che "Devis" est bien termin√©e
            const { data: devisTask, error: devisError } = await supabase
                .from('tasks')
                .select('id, status')
                .eq('project_id', projectId)
                .eq('title', 'Devis')
                .eq('workflow_order', 3)
                .single();
            
            if (devisError || devisTask.status !== 'completed') {
                console.log('T√¢che "Devis" non termin√©e, ne peut pas d√©verrouiller "Validation du devis"');
                return null;
            }
            
            // Chercher la t√¢che "Validation du devis" pour ce projet
            const { data: validationTask, error: findError } = await supabase
                .from('tasks')
                .select('id, title, status, workflow_order')
                .eq('project_id', projectId)
                .eq('title', 'Validation du devis')
                .eq('workflow_order', 4)
                .single();
            
            if (findError) {
                console.log('Aucune t√¢che "Validation du devis" trouv√©e pour ce projet:', findError);
                return null;
            }
            
            // Si la t√¢che est d√©j√† active ou termin√©e, ne rien faire
            if (validationTask.status === 'todo' || validationTask.status === 'in_progress' || validationTask.status === 'completed') {
                console.log('T√¢che "Validation du devis" d√©j√† accessible ou termin√©e');
                return validationTask;
            }
            
            // Mettre la t√¢che en mode "todo" pour la d√©verrouiller
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update({ 
                    status: 'todo',
                    updated_at: new Date().toISOString()
                })
                .eq('id', validationTask.id)
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (updateError) throw updateError;
            
            console.log(`‚úÖ T√¢che "Validation du devis" automatiquement d√©verrouill√©e pour le projet ${projectId}`);
            return data;
            
        } catch (err) {
            console.error('Erreur lors du d√©verrouillage de la t√¢che Validation du devis:', err);
            // Ne pas relancer l'erreur car c'est une action secondaire
            return null;
        }
    };

    const autoCompleteValidationTask = async (projectId, signedDevisUrl) => {
        try {
            setError(null);
            console.log(`üîß [autoCompleteValidationTask] Recherche t√¢che "Validation du devis" pour projet ${projectId}`);
            
            // Chercher la t√¢che "Validation du devis" pour ce projet
            const { data: validationTask, error: findError } = await supabase
                .from('tasks')
                .select('id, title, status, workflow_order')
                .eq('project_id', projectId)
                .eq('title', 'Validation du devis')
                .eq('workflow_order', 4)
                .in('status', ['todo', 'in_progress'])
                .single();
            
            if (findError) {
                console.log('Aucune t√¢che "Validation du devis" en attente trouv√©e pour ce projet:', findError);
                return null;
            }
            
            // Cr√©er la description personnalis√©e
            const newDescription = `Devis valid√© et sign√© √©lectroniquement par le client. Document sign√© disponible.`;
            
            // Marquer la t√¢che comme termin√©e avec la nouvelle description
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update({ 
                    status: 'completed',
                    description: newDescription,
                    updated_at: new Date().toISOString()
                })
                .eq('id', validationTask.id)
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (updateError) throw updateError;
            
            console.log(`‚úÖ T√¢che "Validation du devis" automatiquement marqu√©e comme termin√©e pour le projet ${projectId}`);
            
            // Auto-d√©verrouiller la t√¢che suivante "Planification"
            await autoUnlockPlanificationTask(projectId);
            
            return data;
            
        } catch (err) {
            console.error('Erreur lors de l\'auto-compl√©tion de la t√¢che Validation du devis:', err);
            setError(err.message);
            throw err;
        }
    };

    const autoUnlockPlanificationTask = async (projectId) => {
        try {
            console.log(`üîß [autoUnlockPlanificationTask] Recherche t√¢che "Planification" pour projet ${projectId}`);
            
            // V√©rifier que la t√¢che "Validation du devis" est bien termin√©e
            const { data: validationTask, error: validationError } = await supabase
                .from('tasks')
                .select('id, status')
                .eq('project_id', projectId)
                .eq('title', 'Validation du devis')
                .eq('workflow_order', 4)
                .single();
            
            if (validationError || validationTask.status !== 'completed') {
                console.log('T√¢che "Validation du devis" non termin√©e, ne peut pas d√©verrouiller "Planification"');
                return null;
            }
            
            // Chercher la t√¢che "Planification" pour ce projet
            const { data: planificationTask, error: findError } = await supabase
                .from('tasks')
                .select('id, title, status, workflow_order')
                .eq('project_id', projectId)
                .eq('title', 'Planification')
                .eq('workflow_order', 5)
                .single();
            
            if (findError) {
                console.log('Aucune t√¢che "Planification" trouv√©e pour ce projet:', findError);
                return null;
            }
            
            // Si la t√¢che est d√©j√† active ou termin√©e, ne rien faire
            if (planificationTask.status === 'todo' || planificationTask.status === 'in_progress' || planificationTask.status === 'completed') {
                console.log('T√¢che "Planification" d√©j√† accessible ou termin√©e');
                return planificationTask;
            }
            
            // Mettre la t√¢che en mode "todo" pour la d√©verrouiller
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update({ 
                    status: 'todo',
                    updated_at: new Date().toISOString()
                })
                .eq('id', planificationTask.id)
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (updateError) throw updateError;
            
            console.log(`‚úÖ T√¢che "Planification" automatiquement d√©verrouill√©e pour le projet ${projectId}`);
            return data;
            
        } catch (err) {
            console.error('Erreur lors du d√©verrouillage de la t√¢che Planification:', err);
            // Ne pas relancer l'erreur car c'est une action secondaire
            return null;
        }
    };
    
    useEffect(() => {
        fetchTasks();
    }, [fetchTasks]);
    
    // TEMPORAIRE: Configuration du temps r√©el (d√©sactiv√©e)
    /*
    useEffect(() => {
        // Cr√©er le channel de subscription pour la table tasks
        const channel = createChannel(
            'tasks-changes',
            'tasks',
            ['INSERT', 'UPDATE', 'DELETE'],
            handleRealtimeChange
        );
        
        // Nettoyage √† la destruction du component
        return () => {
            if (channel) {
                removeChannel('tasks-changes');
            }
        };
    }, [createChannel, removeChannel, handleRealtimeChange]);
    */

    const autoCompletePlanificationTask = async (projectId) => {
        try {
            setError(null);
            console.log(`üîß [autoCompletePlanificationTask] Recherche t√¢che "Planification" pour projet ${projectId}`);
            
            // Chercher la t√¢che "Planification" pour ce projet
            const { data: planificationTask, error: findError } = await supabase
                .from('tasks')
                .select('id, title, status, workflow_order')
                .eq('project_id', projectId)
                .eq('title', 'Planification')
                .eq('workflow_order', 5)
                .in('status', ['todo', 'in_progress'])
                .single();
            
            if (findError) {
                console.log('Aucune t√¢che "Planification" en attente trouv√©e pour ce projet:', findError);
                return null;
            }
            
            // Cr√©er la description personnalis√©e
            const newDescription = `Formation planifi√©e et valid√©e. Sessions programm√©es avec les stagiaires et formateurs.`;
            
            // Marquer la t√¢che comme termin√©e avec la nouvelle description
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update({ 
                    status: 'completed',
                    description: newDescription,
                    updated_at: new Date().toISOString()
                })
                .eq('id', planificationTask.id)
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (updateError) throw updateError;
            
            console.log(`‚úÖ T√¢che "Planification" automatiquement marqu√©e comme termin√©e pour le projet ${projectId}`);
            
            return data;
            
        } catch (err) {
            console.error('Erreur lors de l\'auto-compl√©tion de la t√¢che Planification:', err);
            setError(err.message);
            throw err;
        }
    };

    // Fonction pour remettre la t√¢che "G√©n√©ration documents" en statut "todo" apr√®s modification des sessions
    const resetDocumentGenerationTask = async (projectId) => {
        try {
            setError(null);
            console.log(`üîÑ [resetDocumentGenerationTask] Recherche t√¢che "G√©n√©ration documents" pour projet ${projectId}`);
            
            // Chercher la t√¢che "G√©n√©ration documents" pour ce projet
            const { data: generationTask, error: findError } = await supabase
                .from('tasks')
                .select('id, title, status, description')
                .eq('project_id', projectId)
                .eq('title', 'G√©n√©ration documents')
                .eq('workflow_order', 6)
                .single();
            
            if (findError) {
                if (findError.code === 'PGRST116') {
                    console.log('Aucune t√¢che "G√©n√©ration documents" trouv√©e pour ce projet');
                    return null;
                } else {
                    throw findError;
                }
            }
            
            console.log(`üìã [resetDocumentGenerationTask] T√¢che "G√©n√©ration documents" trouv√©e:`, generationTask);
            
            // Si la t√¢che est d√©j√† en statut "todo", pas besoin de la modifier
            if (generationTask.status === 'todo') {
                console.log(`‚ÑπÔ∏è [resetDocumentGenerationTask] T√¢che d√©j√† en statut "todo", aucune action n√©cessaire`);
                return generationTask;
            }
            
            // Cr√©er la nouvelle description
            const newDescription = `Documents √† r√©g√©n√©rer suite √† la modification des sessions de formation.`;
            console.log(`üìù [resetDocumentGenerationTask] Remise en statut "todo" avec description: ${newDescription}`);
            
            // Remettre la t√¢che en statut "todo"
            const { data, error: updateError } = await supabase
                .from('tasks')
                .update({ 
                    status: 'todo',
                    description: newDescription,
                    updated_at: new Date().toISOString()
                })
                .eq('id', generationTask.id)
                .select(`
                    *,
                    project:project_id(id, name, 
                        entreprise:entreprise_id(id, nom, adresse)
                    ),
                    assigned_user:assigned_to(id, prenom, nom),
                    created_user:created_by(id, prenom, nom)
                `)
                .single();
            
            if (updateError) throw updateError;
            
            console.log(`‚úÖ [resetDocumentGenerationTask] T√¢che "G√©n√©ration documents" remise en statut "todo" pour le projet ${projectId}`);
            
            // Rafra√Æchir la liste des t√¢ches
            await fetchTasks();
            
            return data;
            
        } catch (err) {
            console.error('‚ùå [resetDocumentGenerationTask] Erreur lors de la remise √† z√©ro de la t√¢che G√©n√©ration documents:', err);
            setError(err.message);
            throw err;
        }
    };
    
    return { tasks, loading, error, createTask, updateTask, deleteTask, updateTaskDescription, completeTask, autoCompleteQualificationTask, autoCompleteDevisTask, autoUnlockValidationTask, autoCompleteValidationTask, autoUnlockPlanificationTask, autoCompletePlanificationTask, resetDocumentGenerationTask, refetch: fetchTasks };
}

// Export global
window.useTasks = useTasks;