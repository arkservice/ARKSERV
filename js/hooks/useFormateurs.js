console.log("üî• [CHARGEMENT] useFormateurs.js CHARG√â!");

// Hook pour g√©rer les formateurs et leurs disponibilit√©s
function useFormateurs() {
    console.log("üéØ [useFormateurs] HOOK APPEL√â!");
    const { useState, useEffect, useCallback } = React;
    const supabase = window.supabaseConfig.client;
    
    // ========== FONCTIONS UTILITAIRES TIMEZONE ==========
    // Cr√©er une date/heure en UTC √† partir d'une date locale et d'une heure
    const createUTCDateTimeFromLocal = useCallback((localDate, timeString) => {
        // Cr√©er une date dans la timezone locale
        const [hours, minutes] = timeString.split(':').map(Number);
        const dateInLocal = new Date(localDate);
        dateInLocal.setHours(hours, minutes, 0, 0);
        
        // Retourner l'ISO string (qui est en UTC)
        return dateInLocal.toISOString();
    }, []);
    
    // Cr√©er une date/heure locale √† partir d'une date et heure (pour affichage)
    const createLocalDateTime = useCallback((date, timeString) => {
        const [hours, minutes] = timeString.split(':').map(Number);
        const localDate = new Date(date);
        localDate.setHours(hours, minutes, 0, 0);
        return localDate;
    }, []);
    
    // V√©rifier si on est en heure d'√©t√© (CEST) ou hiver (CET) pour la France
    const getTimezoneOffset = useCallback((date) => {
        // En France: UTC+1 (hiver) ou UTC+2 (√©t√©)
        const offset = -date.getTimezoneOffset() / 60; // Offset en heures
        return offset;
    }, []);
    
    console.log(`üåç Timezone actuelle: UTC${getTimezoneOffset(new Date()) >= 0 ? '+' : ''}${getTimezoneOffset(new Date())}`);
    
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    
    // R√©cup√©rer tous les formateurs avec leurs comp√©tences - VERSION SIMPLE
    const getFormateursByLogiciel = useCallback(async (logicielId) => {
        console.log(`üîç [getFormateursByLogiciel] DEBUT - Recherche pour logiciel ${logicielId}`);
        
        try {
            setLoading(true);
            setError(null);
            
            // R√©cup√©rer les users avec leurs d√©tails complets
            const { data, error } = await supabase
                .from('user_competence')
                .select(`
                    user_id, 
                    niveau,
                    user_profile:user_id (
                        id,
                        prenom,
                        nom,
                        email,
                        avatar,
                        fonction:fonction_id (
                            nom
                        )
                    )
                `)
                .eq('logiciel_id', logicielId);
            
            if (error) {
                console.error('‚ùå Erreur requ√™te user_competence:', error);
                throw error;
            }
            
            console.log(`‚úÖ Users avec comp√©tences trouv√©s:`, data);
            
            if (!data || data.length === 0) {
                console.log('‚ö†Ô∏è Aucun user avec comp√©tence pour ce logiciel');
                return [];
            }
            
            // Filtrer uniquement les formateurs (fonction = 'formateur')
            const formateurs = data
                .filter(item => {
                    const isFormateur = item.user_profile?.fonction?.nom === 'formateur';
                    console.log(`üë§ User ${item.user_profile?.prenom} ${item.user_profile?.nom} - Fonction: ${item.user_profile?.fonction?.nom} - Est formateur: ${isFormateur}`);
                    return isFormateur;
                })
                .map(item => ({
                    id: item.user_id,
                    prenom: item.user_profile?.prenom || 'Utilisateur',
                    nom: item.user_profile?.nom || 'Inconnu',
                    email: item.user_profile?.email || '',
                    avatar: item.user_profile?.avatar || null,
                    niveau: item.niveau,
                    fonction: item.user_profile?.fonction?.nom
                }));
            
            console.log(`üìã Formateurs qualifi√©s trouv√©s:`, formateurs);
            
            // Si aucun formateur officiel, fallback vers tous les utilisateurs comp√©tents
            if (formateurs.length === 0) {
                console.log('‚ö†Ô∏è Aucun formateur officiel, fallback vers tous les utilisateurs comp√©tents');
                const allCompetentUsers = data.map(item => ({
                    id: item.user_id,
                    prenom: item.user_profile?.prenom || 'Utilisateur',
                    nom: item.user_profile?.nom || 'Inconnu',
                    email: item.user_profile?.email || '',
                    avatar: item.user_profile?.avatar || null,
                    niveau: item.niveau,
                    fonction: item.user_profile?.fonction?.nom || 'non d√©finie'
                }));
                console.log(`üìã Utilisateurs comp√©tents (fallback):`, allCompetentUsers);
                return allCompetentUsers;
            }
            
            return formateurs;
        } catch (err) {
            console.error('Erreur lors du chargement des formateurs:', err);
            setError(err.message);
            return [];
        } finally {
            setLoading(false);
        }
    }, [supabase, createUTCDateTimeFromLocal]);
    
    // G√©n√©rer tous les cr√©neaux de 30min entre 9h et 17h30
    const generateTimeSlots = useCallback(() => {
        const slots = [];
        for (let hour = 9; hour < 17; hour++) {
            for (let minute = 0; minute < 60; minute += 30) {
                const startTime = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                const endHour = minute === 30 ? hour + 1 : hour;
                const endMinute = minute === 30 ? 0 : minute + 30;
                const endTime = `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`;
                
                slots.push({
                    startTime,
                    endTime,
                    display: `${startTime} - ${endTime}`
                });
            }
        }
        // Ajouter le dernier cr√©neau 17h00-17h30
        slots.push({
            startTime: '17:00',
            endTime: '17:30',
            display: '17:00 - 17:30'
        });
        
        return slots;
    }, []);
    
    // V√©rifier si un formateur est disponible sur un cr√©neau
    const isFormateurAvailable = useCallback(async (formateurId, date, startTime, endTime) => {
        try {
            // IMPORTANT: Convertir les heures locales en UTC pour comparaison avec la DB
            const startDateTimeUTC = createUTCDateTimeFromLocal(date, startTime);
            const endDateTimeUTC = createUTCDateTimeFromLocal(date, endTime);
            
            // Pour le debug: montrer les conversions
            const startLocal = createLocalDateTime(date, startTime);
            const endLocal = createLocalDateTime(date, endTime);
            
            console.log(`üîç V√©rification disponibilit√© formateur ${formateurId} pour ${date.toDateString()} ${startTime}-${endTime}`);
            console.log(`üåç Timezone offset: UTC+${getTimezoneOffset(date)}`);
            console.log(`‚è∞ Cr√©neau LOCAL: ${startLocal.toLocaleString()} - ${endLocal.toLocaleString()}`);
            console.log(`üåê Cr√©neau UTC pour DB: ${startDateTimeUTC} - ${endDateTimeUTC}`);
            
            // V√©rifier s'il y a des conflits avec les √©v√©nements existants
            // LOGIQUE CORRIG√âE : Un conflit existe si l'√©v√©nement existant chevauche avec le nouveau cr√©neau
            // Conflit = (event_start < new_end) AND (event_end > new_start)
            const { data, error } = await supabase
                .from('evenement')
                .select('id, titre, date_debut, date_fin')
                .eq('user_id', formateurId)
                .lt('date_debut', endDateTimeUTC)   // Event starts before new slot ends
                .gt('date_fin', startDateTimeUTC); // Event ends after new slot starts
            
            if (error) throw error;
            
            console.log(`üìä ${data.length} conflit(s) trouv√©(s) pour formateur ${formateurId}:`);
            data.forEach(event => {
                console.log(`  - ${event.titre}: ${event.date_debut} ‚Üí ${event.date_fin}`);
            });
            
            const isAvailable = data.length === 0;
            console.log(`‚úÖ R√©sultat: Formateur ${formateurId} ${isAvailable ? 'DISPONIBLE' : 'INDISPONIBLE'} pour ${startTime}-${endTime}`);
            
            return isAvailable; // Disponible si aucun conflit
        } catch (err) {
            console.error('Erreur lors de la v√©rification de disponibilit√©:', err);
            return false;
        }
    }, [supabase]);
    
    // Obtenir les cr√©neaux disponibles pour une date et un logiciel
    const getAvailableSlots = useCallback(async (logicielId, date) => {
        console.log(`üöÄ [getAvailableSlots] APPEL DE LA FONCTION`);
        console.log(`üìÖ Date: ${date}`);
        console.log(`üîß Logiciel ID: ${logicielId}`);
        
        try {
            setLoading(true);
            setError(null);
            
            console.log(`Recherche cr√©neaux pour logiciel ${logicielId} le ${date.toDateString()}`);
            
            // R√©cup√©rer les formateurs qualifi√©s
            const formateurs = await getFormateursByLogiciel(logicielId);
            console.log(`Formateurs trouv√©s:`, formateurs);
            
            if (formateurs.length === 0) {
                console.log('Aucun formateur qualifi√© trouv√©');
                return [];
            }
            
            // G√©n√©rer tous les cr√©neaux possibles
            const allSlots = generateTimeSlots();
            console.log(`V√©rification de ${allSlots.length} cr√©neaux possibles`);
            
            const availableSlots = [];
            
            // V√©rifier chaque cr√©neau
            for (const slot of allSlots) {
                const availableFormateurs = [];
                
                // V√©rifier la disponibilit√© de chaque formateur pour ce cr√©neau
                for (const formateur of formateurs) {
                    const isAvailable = await isFormateurAvailable(
                        formateur.id, 
                        date, 
                        slot.startTime, 
                        slot.endTime
                    );
                    
                    if (isAvailable) {
                        availableFormateurs.push(formateur);
                        console.log(`‚úÖ ${formateur.prenom} ${formateur.nom} disponible pour ${slot.display}`);
                    } else {
                        console.log(`‚ùå ${formateur.prenom} ${formateur.nom} indisponible pour ${slot.display}`);
                    }
                }
                
                // Si au moins un formateur est disponible, ajouter le cr√©neau
                if (availableFormateurs.length > 0) {
                    availableSlots.push({
                        ...slot,
                        availableFormateurs,
                        formateurCount: availableFormateurs.length
                    });
                }
            }
            
            console.log(`R√©sultat final: ${availableSlots.length} cr√©neaux disponibles`);
            return availableSlots;
        } catch (err) {
            console.error('Erreur lors du calcul des cr√©neaux disponibles:', err);
            setError(err.message);
            return [];
        } finally {
            setLoading(false);
        }
    }, [getFormateursByLogiciel, generateTimeSlots, isFormateurAvailable]);
    
    // R√©server un cr√©neau avec un formateur
    const bookAppointment = useCallback(async (slot, date, tacheId, projectId, logicielId) => {
        try {
            setLoading(true);
            setError(null);
            
            // S√©lectionner le formateur le moins charg√© (premier dans la liste pour simplifier)
            const selectedFormateur = slot.availableFormateurs[0];
            
            // Cr√©er les timestamps pour l'√©v√©nement en UTC
            const startDateTimeUTC = createUTCDateTimeFromLocal(date, slot.startTime);
            const endDateTimeUTC = createUTCDateTimeFromLocal(date, slot.endTime);
            
            console.log(`üíæ Cr√©ation RDV - Conversion timezone:`);
            console.log(`   üåê UTC: ${startDateTimeUTC} - ${endDateTimeUTC}`);
            console.log(`   üåç Local: ${new Date(startDateTimeUTC).toLocaleString()} - ${new Date(endDateTimeUTC).toLocaleString()}`);
            
            // R√©cup√©rer les informations du logiciel pour le titre
            const { data: logicielData } = await supabase
                .from('logiciel')
                .select('nom')
                .eq('id', logicielId)
                .single();
            
            // Cr√©er l'√©v√©nement de RDV
            const { data: eventData, error: eventError } = await supabase
                .from('evenement')
                .insert({
                    titre: `RDV Qualification - ${logicielData?.nom || 'Formation'}`,
                    description: `Rendez-vous de qualification avec le formateur pour d√©finir le plan de formation`,
                    date_debut: startDateTimeUTC,
                    date_fin: endDateTimeUTC,
                    user_id: selectedFormateur.id,
                    projet_id: projectId,
                    type_evenement: 'rendez_vous',
                    statut: 'confirme',
                    priorite: 'normale'
                })
                .select()
                .single();
            
            if (eventError) throw eventError;
            
            // Marquer la t√¢che actuelle comme termin√©e et mettre √† jour sa description
            const newDescription = `RDV le ${new Date(startDateTimeUTC).toLocaleDateString('fr-FR')} √† ${slot.startTime} avec le formateur ${selectedFormateur.prenom} ${selectedFormateur.nom}`;
            console.log("üîÑ [bookAppointment] Mise √† jour de la description de la t√¢che:", newDescription);
            
            const { error: taskCompleteError } = await supabase
                .from('tasks')
                .update({ 
                    status: 'completed',
                    description: newDescription,
                    updated_at: new Date().toISOString()
                })
                .eq('id', tacheId);
            
            if (taskCompleteError) throw taskCompleteError;
            
            // Mettre √† jour la t√¢che "qualification" existante (chercher sans crit√®re d'assignation)
            console.log("üîÑ [bookAppointment] Recherche de la t√¢che Qualification existante...");
            
            // D'abord chercher la t√¢che "Qualification" existante
            const { data: existingTask, error: findError } = await supabase
                .from('tasks')
                .select('id, status, assigned_to')
                .eq('project_id', projectId)
                .eq('title', 'Qualification')
                .eq('workflow_order', 2)
                .single();
            
            let taskData;
            if (existingTask) {
                // Mettre √† jour la t√¢che existante
                console.log("‚úÖ [bookAppointment] T√¢che Qualification trouv√©e, mise √† jour...", existingTask);
                const { data: updatedTaskData, error: updateTaskError } = await supabase
                    .from('tasks')
                    .update({
                        assigned_to: selectedFormateur.id,
                        description: `Qualifier le client et d√©finir le plan de formation adapt√© lors du rendez-vous du ${new Date(startDateTimeUTC).toLocaleDateString('fr-FR')} √† ${slot.startTime}`,
                        status: 'todo',
                        updated_at: new Date().toISOString()
                    })
                    .eq('id', existingTask.id)
                    .select()
                    .single();
                
                if (updateTaskError) throw updateTaskError;
                taskData = updatedTaskData;
                console.log("‚úÖ [bookAppointment] T√¢che Qualification existante mise √† jour:", taskData);
            } else {
                // Cr√©er une nouvelle t√¢che seulement si aucune n'existe
                console.log("‚ö†Ô∏è [bookAppointment] Aucune t√¢che Qualification trouv√©e, cr√©ation d'une nouvelle...");
                const { data: newTaskData, error: newTaskError } = await supabase
                    .from('tasks')
                    .insert({
                        title: 'Qualification',
                        description: `Qualifier le client et d√©finir le plan de formation adapt√© lors du rendez-vous du ${new Date(startDateTimeUTC).toLocaleDateString('fr-FR')} √† ${slot.startTime}`,
                        project_id: projectId,
                        assigned_to: selectedFormateur.id,
                        priority: 'high',
                        status: 'todo',
                        task_type: 'action',
                        workflow_order: 2
                    })
                    .select()
                    .single();
                
                if (newTaskError) throw newTaskError;
                taskData = newTaskData;
                console.log("‚úÖ [bookAppointment] Nouvelle t√¢che Qualification cr√©√©e:", taskData);
            }
            
            // Note: La r√©initialisation du PDC est g√©r√©e dans Layout.js pour √©viter les violations de r√®gles des hooks
            console.log("‚ÑπÔ∏è [bookAppointment] RDV cr√©√© avec succ√®s, r√©initialisation PDC g√©r√©e dans Layout.js");
            
            return {
                event: eventData,
                task: taskData,
                formateur: selectedFormateur,
                appointmentDetails: {
                    date: date.toLocaleDateString('fr-FR'),
                    time: slot.display,
                    formateurName: `${selectedFormateur.prenom} ${selectedFormateur.nom}`
                }
            };
            
        } catch (err) {
            console.error('Erreur lors de la r√©servation:', err);
            setError(err.message);
            throw err;
        } finally {
            setLoading(false);
        }
    }, [supabase, createUTCDateTimeFromLocal]);
    
    // G√©n√©rer les cr√©neaux pour une session de formation (dur√©e en jours)
    const generateSessionTimeSlots = useCallback((sessionDurationInDays) => {
        const slots = [];
        
        // Pour toute formation (1 jour ou plus), proposer des cr√©neaux journ√©e compl√®te
        slots.push({
            startTime: '09:00',
            endTime: '17:00',
            display: `09:00 - 17:00 (${sessionDurationInDays} jour${sessionDurationInDays > 1 ? 's' : ''})`,
            duration: 7,
            durationInDays: sessionDurationInDays
        });
        
        return slots;
    }, []);
    
    // V√©rifier la disponibilit√© d'un formateur sur plusieurs jours cons√©cutifs
    const isFormateurAvailableMultiDays = useCallback(async (formateurId, dates, startTime, endTime) => {
        try {
            for (const date of dates) {
                const isAvailable = await isFormateurAvailable(formateurId, date, startTime, endTime);
                if (!isAvailable) {
                    return false; // Si indisponible un seul jour, refuser
                }
            }
            return true; // Disponible tous les jours
        } catch (err) {
            console.error('Erreur lors de la v√©rification multi-jours:', err);
            return false;
        }
    }, [isFormateurAvailable]);

    // Obtenir les cr√©neaux disponibles pour une session de formation (multi-jours)
    const getAvailableSlotsForSession = useCallback(async (logicielId, dates, sessionDuration) => {
        console.log(`üöÄ [getAvailableSlotsForSession] APPEL DE LA FONCTION`);
        console.log(`üìÖ Dates: ${dates.map(d => d.toDateString()).join(', ')}`);
        console.log(`üîß Logiciel ID: ${logicielId}`);
        console.log(`‚è±Ô∏è Dur√©e session: ${sessionDuration} jours`);
        
        try {
            setLoading(true);
            setError(null);
            
            console.log(`Recherche cr√©neaux SESSION pour logiciel ${logicielId} sur ${dates.length} jour(s)`);
            
            // R√©cup√©rer les formateurs qualifi√©s
            const formateurs = await getFormateursByLogiciel(logicielId);
            console.log(`Formateurs trouv√©s:`, formateurs);
            
            if (formateurs.length === 0) {
                console.log('Aucun formateur qualifi√© trouv√©');
                return [];
            }
            
            // G√©n√©rer les cr√©neaux de session selon la dur√©e
            const sessionSlots = generateSessionTimeSlots(sessionDuration);
            console.log(`V√©rification de ${sessionSlots.length} cr√©neaux de session possibles`);
            
            const availableSlots = [];
            
            // V√©rifier chaque cr√©neau
            for (const slot of sessionSlots) {
                const availableFormateurs = [];
                
                // V√©rifier la disponibilit√© de chaque formateur pour TOUS les jours
                for (const formateur of formateurs) {
                    const isAvailable = await isFormateurAvailableMultiDays(
                        formateur.id, 
                        dates, 
                        slot.startTime, 
                        slot.endTime
                    );
                    
                    if (isAvailable) {
                        availableFormateurs.push(formateur);
                        console.log(`‚úÖ ${formateur.prenom} ${formateur.nom} disponible pour ${slot.display}`);
                    } else {
                        console.log(`‚ùå ${formateur.prenom} ${formateur.nom} indisponible pour ${slot.display}`);
                    }
                }
                
                // Si au moins un formateur est disponible, ajouter le cr√©neau
                if (availableFormateurs.length > 0) {
                    availableSlots.push({
                        ...slot,
                        availableFormateurs,
                        formateurCount: availableFormateurs.length
                    });
                }
            }
            
            console.log(`R√©sultat final: ${availableSlots.length} cr√©neaux de session disponibles`);
            return availableSlots;
        } catch (err) {
            console.error('Erreur lors du calcul des cr√©neaux de session disponibles:', err);
            setError(err.message);
            return [];
        } finally {
            setLoading(false);
        }
    }, [getFormateursByLogiciel, generateSessionTimeSlots, isFormateurAvailableMultiDays]);
    
    // R√©server un cr√©neau de session avec un formateur (multi-jours)
    const bookSessionAppointment = useCallback(async (slot, dates, sessionNumber, projectId, logicielId) => {
        try {
            setLoading(true);
            setError(null);
            
            // S√©lectionner le formateur le moins charg√© (premier dans la liste pour simplifier)
            const selectedFormateur = slot.availableFormateurs[0];
            
            // CORRECTION: R√©cup√©rer les stagiaires du projet
            console.log(`üîç [bookSessionAppointment] R√©cup√©ration des stagiaires du projet ${projectId}`);
            const { data: projectData, error: projectError } = await supabase
                .from('projects')
                .select('stagiaires')
                .eq('id', projectId)
                .single();
            
            if (projectError) {
                console.warn('‚ö†Ô∏è [bookSessionAppointment] Erreur lors de la r√©cup√©ration des stagiaires du projet:', projectError);
            }
            
            const stagiaireIds = projectData?.stagiaires || [];
            console.log(`üë• [bookSessionAppointment] Stagiaires trouv√©s dans le projet:`, stagiaireIds);
            
            // R√©cup√©rer les informations du logiciel pour le titre
            const { data: logicielData } = await supabase
                .from('logiciel')
                .select('nom')
                .eq('id', logicielId)
                .single();
            
            const createdEvents = [];
            
            // Cr√©er un √©v√©nement pour chaque jour
            for (let dayIndex = 0; dayIndex < dates.length; dayIndex++) {
                const currentDate = dates[dayIndex];
                // IMPORTANT: Utiliser la conversion timezone pour sauvegarder en UTC
                const startDateTimeUTC = createUTCDateTimeFromLocal(currentDate, slot.startTime);
                const endDateTimeUTC = createUTCDateTimeFromLocal(currentDate, slot.endTime);
                
                console.log(`üíæ Sauvegarde √©v√©nement jour ${dayIndex + 1}:`);
                console.log(`   üåê UTC: ${startDateTimeUTC} - ${endDateTimeUTC}`);
                console.log(`   üåç Local: ${new Date(startDateTimeUTC).toLocaleString()} - ${new Date(endDateTimeUTC).toLocaleString()}`);
                console.log(`   üë• Stagiaires assign√©s: ${stagiaireIds.length} stagiaire(s)`);
                
                const dayLabel = dates.length > 1 ? ` - Jour ${dayIndex + 1}/${dates.length}` : '';
                
                // Cr√©er l'√©v√©nement de formation pour ce jour
                const { data: eventData, error: eventError } = await supabase
                    .from('evenement')
                    .insert({
                        titre: `Formation ${logicielData?.nom || 'Logiciel'} - Session ${sessionNumber}${dayLabel}`,
                        description: `Session de formation ${logicielData?.nom || 'logiciel'} avec le formateur`,
                        date_debut: startDateTimeUTC,
                        date_fin: endDateTimeUTC,
                        user_id: selectedFormateur.id,
                        projet_id: projectId,
                        type_evenement: 'formation',
                        statut: 'planifie',
                        priorite: 'normale',
                        lieu: '√Ä d√©finir',
                        client_user_id: stagiaireIds // CORRECTION: Assigner les stagiaires du projet
                    })
                    .select()
                    .single();
                
                if (eventError) {
                    // En cas d'erreur, annuler tous les √©v√©nements d√©j√† cr√©√©s
                    for (const event of createdEvents) {
                        await supabase.from('evenement').delete().eq('id', event.id);
                    }
                    throw eventError;
                }
                
                createdEvents.push(eventData);
            }
            
            // NOUVEAU: Synchroniser le lieu et la p√©riode du projet apr√®s cr√©ation des √©v√©nements
            console.log('üîÑ [bookSessionAppointment] Synchronisation du lieu et p√©riode du projet apr√®s cr√©ation des √©v√©nements');
            
            if (window.projectUtils) {
                try {
                    // Synchroniser le lieu
                    if (window.projectUtils.synchronizeProjectLieu) {
                        await window.projectUtils.synchronizeProjectLieu(projectId, null, supabase);
                        console.log('‚úÖ [bookSessionAppointment] Lieu du projet synchronis√©');
                    }
                    
                    // Synchroniser la p√©riode
                    if (window.projectUtils.synchronizeProjectPeriode) {
                        await window.projectUtils.synchronizeProjectPeriode(projectId, null, supabase);
                        console.log('‚úÖ [bookSessionAppointment] P√©riode du projet synchronis√©e');
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è [bookSessionAppointment] Erreur synchronisation projet:', error);
                    // Ne pas faire √©chouer la cr√©ation des √©v√©nements pour autant
                }
            }
            
            // Retourner les informations pour le premier jour (UI display)
            const firstDate = dates[0];
            const lastDate = dates[dates.length - 1];
            const dateRange = dates.length > 1 ? 
                `du ${firstDate.toLocaleDateString('fr-FR')} au ${lastDate.toLocaleDateString('fr-FR')}` : 
                firstDate.toLocaleDateString('fr-FR');
            
            return {
                events: createdEvents, // Tous les √©v√©nements cr√©√©s
                event: createdEvents[0], // Premier √©v√©nement pour compatibilit√©
                formateur: selectedFormateur,
                // Ajouter les dates UTC de la base de donn√©es pour √©viter les d√©calages timezone
                dateDebut: createdEvents[0].date_debut,
                dateFin: createdEvents[createdEvents.length - 1].date_fin,
                formateurId: selectedFormateur.id,
                formateurNom: `${selectedFormateur.prenom} ${selectedFormateur.nom}`,
                eventId: createdEvents[0].id,
                eventIds: createdEvents.map(e => e.id),
                sessionDetails: {
                    sessionNumber,
                    date: dateRange,
                    time: slot.display,
                    formateurName: `${selectedFormateur.prenom} ${selectedFormateur.nom}`,
                    duration: slot.duration,
                    datesCount: dates.length
                }
            };
            
        } catch (err) {
            console.error('Erreur lors de la r√©servation de session:', err);
            setError(err.message);
            throw err;
        } finally {
            setLoading(false);
        }
    }, [supabase, createUTCDateTimeFromLocal]);
    
    // Cache pour optimiser les performances
    const availabilityCache = React.useRef(new Map());
    const CACHE_DURATION = 2 * 60 * 1000; // 2 minutes (r√©duit pour √©viter les bugs)
    
    // Fonction pour vider le cache (utile pour le debugging)
    const clearAvailabilityCache = useCallback(() => {
        availabilityCache.current.clear();
        console.log('üóëÔ∏è Cache de disponibilit√© vid√©');
    }, []);
    
    // Vider le cache au d√©marrage pour √©viter les donn√©es obsoletes
    React.useEffect(() => {
        clearAvailabilityCache();
    }, [clearAvailabilityCache]);
    
    // Fonction helper pour v√©rifier les conflits - AVEC GESTION TIMEZONE
    const hasConflict = (events, date, startTime, endTime) => {
        // IMPORTANT: Utiliser la m√™me logique de conversion que isFormateurAvailable
        const startDateTimeUTC = createUTCDateTimeFromLocal(date, startTime);
        const endDateTimeUTC = createUTCDateTimeFromLocal(date, endTime);
        
        const startDT = new Date(startDateTimeUTC);
        const endDT = new Date(endDateTimeUTC);
        
        return events.some(event => {
            const eventStart = new Date(event.date_debut);
            const eventEnd = new Date(event.date_fin);
            
            // V√©ritable logique de chevauchement : event_start < new_end AND event_end > new_start
            const hasOverlap = eventStart < endDT && eventEnd > startDT;
            
            if (hasOverlap) {
                console.log(`‚ö†Ô∏è Conflit d√©tect√©:`);
                console.log(`   üìÖ √âv√©nement: ${event.titre || 'Sans titre'}`);
                console.log(`   ‚è∞ Event UTC: ${event.date_debut} - ${event.date_fin}`);
                console.log(`   üåç Event Local: ${eventStart.toLocaleString()} - ${eventEnd.toLocaleString()}`);
                console.log(`   üÜï Nouveau cr√©neau UTC: ${startDateTimeUTC} - ${endDateTimeUTC}`);
                console.log(`   üÜï Nouveau cr√©neau Local: ${startDT.toLocaleString()} - ${endDT.toLocaleString()}`);
            }
            
            return hasOverlap;
        });
    };

    // Fonction pour v√©rifier qu'il y a une couverture compl√®te de 9h √† 17h30
    const hasFullDayCoverage = (slots, requiredStart = "09:00", requiredEnd = "17:30") => {
        if (!slots || slots.length === 0) {
            return false;
        }
        
        // Trier les cr√©neaux par heure de d√©but
        const sortedSlots = slots.sort((a, b) => a.startTime.localeCompare(b.startTime));
        
        // V√©rifier que le premier cr√©neau commence √† l'heure requise
        if (sortedSlots[0].startTime !== requiredStart) {
            return false;
        }
        
        // V√©rifier la continuit√© entre les cr√©neaux
        for (let i = 0; i < sortedSlots.length - 1; i++) {
            if (sortedSlots[i].endTime !== sortedSlots[i + 1].startTime) {
                return false; // Trou dans la couverture
            }
        }
        
        // V√©rifier que le dernier cr√©neau se termine √† l'heure requise
        const lastSlot = sortedSlots[sortedSlots.length - 1];
        if (lastSlot.endTime !== requiredEnd) {
            return false;
        }
        
        return true;
    };
    
    // V√©rifier la disponibilit√© pour un jour donn√©
    const checkDayAvailability = useCallback(async (logicielId, date) => {
        try {
            // R√©cup√©rer les formateurs qualifi√©s
            const formateurs = await getFormateursByLogiciel(logicielId);
            if (formateurs.length === 0) return false;
            
            // V√©rifier si au moins un formateur est disponible ce jour
            for (const formateur of formateurs) {
                const isAvailable = await isFormateurAvailable(
                    formateur.id, 
                    date, 
                    '09:00', 
                    '17:00'
                );
                if (isAvailable) return true;
            }
            return false;
        } catch (err) {
            console.error('Erreur checkDayAvailability:', err);
            return false;
        }
    }, [getFormateursByLogiciel, isFormateurAvailable]);
    
    // V√©rifier la disponibilit√© pour des jours cons√©cutifs
    const checkConsecutiveDaysAvailability = useCallback(async (logicielId, startDate, duration) => {
        try {
            // G√©n√©rer les dates cons√©cutives
            const dates = [];
            const current = new Date(startDate);
            
            for (let i = 0; i < duration; i++) {
                // V√©rifier que c'est un jour ouvrable
                const dayOfWeek = current.getDay();
                if (dayOfWeek === 0 || dayOfWeek === 6) return false; // Weekend
                
                dates.push(new Date(current));
                current.setDate(current.getDate() + 1);
            }
            
            // R√©cup√©rer les formateurs qualifi√©s
            const formateurs = await getFormateursByLogiciel(logicielId);
            if (formateurs.length === 0) return false;
            
            // V√©rifier si au moins un formateur est disponible tous les jours
            for (const formateur of formateurs) {
                const isAvailableAllDays = await isFormateurAvailableMultiDays(
                    formateur.id, 
                    dates, 
                    '09:00', 
                    '17:00'
                );
                if (isAvailableAllDays) return true;
            }
            return false;
        } catch (err) {
            console.error('Erreur checkConsecutiveDaysAvailability:', err);
            return false;
        }
    }, [getFormateursByLogiciel, isFormateurAvailableMultiDays]);
    
    // R√©cup√©rer la disponibilit√© pour un mois entier (optimis√©)
    const getAvailabilityForCalendarMonth = useCallback(async (logicielId, year, month, sessionDuration, selectedFormateur = null) => {
        // Am√©lioration de la cl√© de cache pour inclure la date actuelle et le formateur s√©lectionn√©
        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
        const formateurId = selectedFormateur ? selectedFormateur.id : 'all';
        const cacheKey = `${logicielId}-${year}-${month}-${sessionDuration}-${formateurId}-${today}`;
        const cached = availabilityCache.current.get(cacheKey);
        
        console.log(`üîë Cl√© de cache: ${cacheKey}`);
        
        // V√©rifier le cache
        if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {
            return cached.data;
        }
        
        try {
            console.log(`üîç [getAvailabilityForCalendarMonth] Calcul pour ${year}-${month}, dur√©e: ${sessionDuration} jour(s)${selectedFormateur ? `, formateur: ${selectedFormateur.prenom} ${selectedFormateur.nom}` : ''}`);
            
            // R√©cup√©rer les formateurs qualifi√©s une seule fois
            let formateurs = await getFormateursByLogiciel(logicielId);
            if (formateurs.length === 0) {
                const emptyResult = { availableDays: [], availableRanges: [], availableFormateurs: [], slotsByDate: {} };
                availabilityCache.current.set(cacheKey, { data: emptyResult, timestamp: Date.now() });
                return emptyResult;
            }
            
            // CORRECTION : Filtrer par formateur s√©lectionn√© si fourni
            if (selectedFormateur) {
                formateurs = formateurs.filter(f => f.id === selectedFormateur.id);
                console.log(`üîç [getAvailabilityForCalendarMonth] Filtrage par formateur: ${formateurs.length} formateur(s) retenu(s)`);
                if (formateurs.length === 0) {
                    const emptyResult = { availableDays: [], availableRanges: [], availableFormateurs: [], slotsByDate: {} };
                    availabilityCache.current.set(cacheKey, { data: emptyResult, timestamp: Date.now() });
                    return emptyResult;
                }
            }
            
            // R√©cup√©rer tous les √©v√©nements du mois pour tous les formateurs en une fois
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            
            const formateurIds = formateurs.map(f => f.id);
            const { data: allEvents, error } = await supabase
                .from('evenement')
                .select('user_id, date_debut, date_fin')
                .in('user_id', formateurIds)
                .gte('date_debut', firstDay.toISOString())
                .lte('date_fin', lastDay.toISOString());
                
            if (error) throw error;
            
            // Organiser les √©v√©nements par formateur et par date
            const eventsByFormateur = {};
            formateurIds.forEach(id => { eventsByFormateur[id] = []; });
            
            (allEvents || []).forEach(event => {
                eventsByFormateur[event.user_id].push(event);
            });
            
            const availableDays = [];
            const availableRanges = [];
            const availableFormateursSet = new Set();
            const slotsByDate = {}; // Nouveau : stocker les cr√©neaux d√©taill√©s par date
            
            // G√©n√©rer tous les cr√©neaux possibles une seule fois
            const allSlots = generateTimeSlots();
            
            // V√©rifier chaque jour du mois
            for (let day = 1; day <= lastDay.getDate(); day++) {
                const currentDate = new Date(year, month, day);
                const dayOfWeek = currentDate.getDay();
                
                // Ignorer les weekends
                if (dayOfWeek === 0 || dayOfWeek === 6) continue;
                
                if (sessionDuration === 1) {
                    // Calculer les cr√©neaux d√©taill√©s pour ce jour
                    const daySlots = [];
                    let dayHasAvailability = false;
                    
                    // V√©rifier chaque cr√©neau de la journ√©e
                    allSlots.forEach(slot => {
                        const availableFormateurs = [];
                        
                        formateurs.forEach(formateur => {
                            const formateurEvents = eventsByFormateur[formateur.id];
                            if (!hasConflict(formateurEvents, currentDate, slot.startTime, slot.endTime)) {
                                availableFormateurs.push(formateur);
                                availableFormateursSet.add(JSON.stringify(formateur));
                            }
                        });
                        
                        // Si au moins un formateur est disponible pour ce cr√©neau
                        if (availableFormateurs.length > 0) {
                            daySlots.push({
                                ...slot,
                                availableFormateurs,
                                formateurCount: availableFormateurs.length
                            });
                            dayHasAvailability = true;
                        }
                    });
                    
                    // Stocker les cr√©neaux de ce jour
                    const dateKey = currentDate.toDateString();
                    slotsByDate[dateKey] = daySlots;
                    
                    // S√âPARATION DES LOGIQUES : Task 1 vs Task 5
                    if (dayHasAvailability) {
                        if (sessionDuration === 1) {
                            // Task 1 (qualification RDV) : Un jour est disponible s'il y a au moins un cr√©neau disponible
                            availableDays.push(new Date(currentDate));
                        } else {
                            // Task 5 (formation) : Un jour est disponible seulement avec couverture compl√®te 9h-17h30
                            const hasCompleteTimeCoverage = hasFullDayCoverage(daySlots, "09:00", "17:30");
                            if (hasCompleteTimeCoverage) {
                                availableDays.push(new Date(currentDate));
                            }
                        }
                    }
                } else {
                    // V√©rification pour sessions multi-jours
                    const consecutiveDates = [];
                    const tempDate = new Date(currentDate);
                    
                    for (let i = 0; i < sessionDuration; i++) {
                        const checkDayOfWeek = tempDate.getDay();
                        if (checkDayOfWeek === 0 || checkDayOfWeek === 6) break; // Weekend
                        if (tempDate.getMonth() !== month) break; // Sortie du mois
                        
                        consecutiveDates.push(new Date(tempDate));
                        tempDate.setDate(tempDate.getDate() + 1);
                    }
                    
                    // V√©rifier si nous avons assez de jours cons√©cutifs
                    if (consecutiveDates.length === sessionDuration) {
                        let rangeHasAvailability = false;
                        formateurs.forEach(formateur => {
                            const formateurEvents = eventsByFormateur[formateur.id];
                            const isAvailable = consecutiveDates.every(date => 
                                !hasConflict(formateurEvents, date, '09:00', '17:00')
                            );
                            if (isAvailable) {
                                availableFormateursSet.add(JSON.stringify(formateur));
                                rangeHasAvailability = true;
                            }
                        });
                        
                        if (rangeHasAvailability) {
                            availableRanges.push({
                                startDate: new Date(consecutiveDates[0]),
                                endDate: new Date(consecutiveDates[consecutiveDates.length - 1]),
                                dates: consecutiveDates.map(d => new Date(d))
                            });
                        }
                    }
                }
            }
            
            // Convertir le Set en array d'objets formateurs
            const availableFormateurs = Array.from(availableFormateursSet).map(formateurString => 
                JSON.parse(formateurString)
            );
            
            const result = { availableDays, availableRanges, availableFormateurs, slotsByDate };
            
            // Mettre en cache
            availabilityCache.current.set(cacheKey, { data: result, timestamp: Date.now() });
            
            const totalSlots = Object.values(slotsByDate).reduce((total, daySlots) => total + daySlots.length, 0);
            console.log(`‚úÖ [getAvailabilityForCalendarMonth] ${availableDays.length} jours, ${availableRanges.length} plages, ${availableFormateurs.length} formateurs et ${totalSlots} cr√©neaux pr√©-calcul√©s`);
            return result;
            
        } catch (err) {
            console.error('Erreur getAvailabilityForCalendarMonth:', err);
            return { availableDays: [], availableRanges: [], availableFormateurs: [], slotsByDate: {} };
        }
    }, [getFormateursByLogiciel, supabase]);
    
    // Modifier un cr√©neau de session existant (supprimer et recr√©er)
    const modifySessionAppointment = useCallback(async (existingSession, slot, dates, sessionNumber, projectId, logicielId) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('üîÑ === MODIFICATION DE SESSION ===');
            console.log('üìä Session existante:', {
                sessionNumber: sessionNumber,
                dateDebut: existingSession.dateDebut,
                dateFin: existingSession.dateFin,
                eventIds: existingSession.eventIds || [existingSession.eventId]
            });
            console.log('üìÖ Nouvelles dates:', dates.map(d => d.toDateString()));
            console.log('üéØ Nouveau cr√©neau:', slot.display);
            
            // √âtape 1: Supprimer les anciens √©v√©nements
            const eventIdsToDelete = existingSession.eventIds || [existingSession.eventId];
            console.log('\\nüóëÔ∏è √âTAPE 1: Suppression des anciens √©v√©nements');
            console.log('   √âv√©nements √† supprimer:', eventIdsToDelete);
            
            for (const eventId of eventIdsToDelete) {
                if (eventId) {
                    console.log(`   üóëÔ∏è Suppression de l'√©v√©nement: ${eventId}`);
                    const { error: deleteError } = await supabase
                        .from('evenement')
                        .delete()
                        .eq('id', eventId);
                    
                    if (deleteError) {
                        console.error('‚ùå Erreur lors de la suppression de l\'√©v√©nement:', eventId, deleteError);
                        throw deleteError;
                    }
                    console.log(`   ‚úÖ √âv√©nement ${eventId} supprim√©`);
                }
            }
            
            console.log('\\n‚úÖ SUPPRESSION TERMIN√âE - Tous les anciens √©v√©nements ont √©t√© supprim√©s');
            console.log('   ‚Üí Anciennes dates compl√®tement supprim√©es de la base de donn√©es');
            
            // √âtape 2: Cr√©er les nouveaux √©v√©nements (r√©utiliser la logique de bookSessionAppointment)
            console.log('\\nüíæ √âTAPE 2: Cr√©ation des nouveaux √©v√©nements');
            console.log(`   Formateur s√©lectionn√©: ${slot.availableFormateurs[0].prenom} ${slot.availableFormateurs[0].nom}`);
            console.log(`   Nombre de jours: ${dates.length}`);
            
            const selectedFormateur = slot.availableFormateurs[0];
            
            // CORRECTION: R√©cup√©rer les stagiaires du projet
            console.log(`üîç [modifySessionAppointment] R√©cup√©ration des stagiaires du projet ${projectId}`);
            const { data: projectData, error: projectError } = await supabase
                .from('projects')
                .select('stagiaires')
                .eq('id', projectId)
                .single();
            
            if (projectError) {
                console.warn('‚ö†Ô∏è [modifySessionAppointment] Erreur lors de la r√©cup√©ration des stagiaires du projet:', projectError);
            }
            
            const stagiaireIds = projectData?.stagiaires || [];
            console.log(`üë• [modifySessionAppointment] Stagiaires trouv√©s dans le projet:`, stagiaireIds);
            
            // R√©cup√©rer les informations du logiciel pour le titre
            const { data: logicielData } = await supabase
                .from('logiciel')
                .select('nom')
                .eq('id', logicielId)
                .single();
            
            const createdEvents = [];
            
            // Cr√©er un √©v√©nement pour chaque jour
            for (let dayIndex = 0; dayIndex < dates.length; dayIndex++) {
                const currentDate = dates[dayIndex];
                const startDateTimeUTC = createUTCDateTimeFromLocal(currentDate, slot.startTime);
                const endDateTimeUTC = createUTCDateTimeFromLocal(currentDate, slot.endTime);
                
                console.log(`   üíæ Cr√©ation √©v√©nement jour ${dayIndex + 1}/${dates.length}:`, {
                    date: currentDate.toDateString(),
                    startUTC: startDateTimeUTC,
                    endUTC: endDateTimeUTC
                });
                
                const dayLabel = dates.length > 1 ? ` - Jour ${dayIndex + 1}/${dates.length}` : '';
                
                // Cr√©er l'√©v√©nement de formation pour ce jour
                const { data: eventData, error: eventError } = await supabase
                    .from('evenement')
                    .insert({
                        titre: `Formation ${logicielData?.nom || 'Logiciel'} - Session ${sessionNumber}${dayLabel}`,
                        description: `Session de formation ${logicielData?.nom || 'logiciel'} avec le formateur (modifi√©e)`,
                        date_debut: startDateTimeUTC,
                        date_fin: endDateTimeUTC,
                        user_id: selectedFormateur.id,
                        projet_id: projectId,
                        type_evenement: 'formation',
                        statut: 'planifie',
                        priorite: 'normale',
                        lieu: existingSession.lieu || '√Ä d√©finir',
                        client_user_id: stagiaireIds // CORRECTION: Utiliser les stagiaires du projet
                    })
                    .select()
                    .single();
                
                if (eventError) {
                    // En cas d'erreur, annuler tous les √©v√©nements d√©j√† cr√©√©s
                    console.log('‚ùå Erreur lors de la cr√©ation, rollback des √©v√©nements cr√©√©s');
                    for (const event of createdEvents) {
                        await supabase.from('evenement').delete().eq('id', event.id);
                    }
                    throw eventError;
                }
                
                console.log(`   ‚úÖ √âv√©nement ${eventData.id} cr√©√© pour le ${currentDate.toDateString()}`);
                createdEvents.push(eventData);
            }
            
            console.log('\\n‚úÖ CR√âATION TERMIN√âE - Tous les nouveaux √©v√©nements ont √©t√© cr√©√©s');
            console.log('   √âv√©nements cr√©√©s:', createdEvents.map(e => e.id));
            console.log('   ‚Üí Nouvelles dates maintenant dans la base de donn√©es');
            
            // NOUVEAU: Synchroniser le lieu et la p√©riode du projet apr√®s modification des √©v√©nements
            console.log('\\nüîÑ [modifySessionAppointment] Synchronisation du lieu et p√©riode du projet apr√®s modification');
            
            if (window.projectUtils) {
                try {
                    // Synchroniser le lieu
                    if (window.projectUtils.synchronizeProjectLieu) {
                        await window.projectUtils.synchronizeProjectLieu(projectId, null, supabase);
                        console.log('‚úÖ [modifySessionAppointment] Lieu du projet synchronis√©');
                    }
                    
                    // Synchroniser la p√©riode
                    if (window.projectUtils.synchronizeProjectPeriode) {
                        await window.projectUtils.synchronizeProjectPeriode(projectId, null, supabase);
                        console.log('‚úÖ [modifySessionAppointment] P√©riode du projet synchronis√©e');
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è [modifySessionAppointment] Erreur synchronisation projet:', error);
                    // Ne pas faire √©chouer la modification pour autant
                }
            }
            
            // Retourner les informations pour la session modifi√©e
            const firstDate = dates[0];
            const lastDate = dates[dates.length - 1];
            const dateRange = dates.length > 1 ? 
                `du ${firstDate.toLocaleDateString('fr-FR')} au ${lastDate.toLocaleDateString('fr-FR')}` : 
                firstDate.toLocaleDateString('fr-FR');
            
            console.log('\\nüéØ === R√âSUM√â DE LA MODIFICATION ===');
            console.log('‚úÖ SUPPRESSION: Anciens √©v√©nements compl√®tement supprim√©s');
            console.log('‚úÖ CR√âATION: Nouveaux √©v√©nements cr√©√©s en remplacement');
            console.log('‚úÖ REMPLACEMENT: Modification termin√©e avec succ√®s');
            console.log(`   Session ${sessionNumber}: ${dateRange}`);
            console.log(`   Nouveaux eventIds: ${createdEvents.map(e => e.id).join(', ')}`);
            
            return {
                events: createdEvents,
                event: createdEvents[0],
                formateur: selectedFormateur,
                sessionDetails: {
                    sessionNumber,
                    date: dateRange,
                    time: slot.display,
                    formateurName: `${selectedFormateur.prenom} ${selectedFormateur.nom}`,
                    duration: slot.duration,
                    datesCount: dates.length
                },
                // Nouvelles donn√©es pour la session modifi√©e
                dateDebut: createdEvents[0].date_debut,
                dateFin: createdEvents[createdEvents.length - 1].date_fin,
                formateurId: selectedFormateur.id,
                formateurNom: `${selectedFormateur.prenom} ${selectedFormateur.nom}`,
                eventId: createdEvents[0].id,
                eventIds: createdEvents.map(e => e.id)
            };
            
        } catch (err) {
            console.error('‚ùå Erreur lors de la modification de session:', err);
            setError(err.message);
            throw err;
        } finally {
            setLoading(false);
        }
    }, [supabase, createUTCDateTimeFromLocal]);
    
    // V√©rifier si un RDV existe d√©j√† pour une t√¢che donn√©e
    const getExistingAppointment = useCallback(async (tacheId, projectId) => {
        try {
            console.log(`üîç [getExistingAppointment] V√©rification RDV existant pour t√¢che ${tacheId} projet ${projectId}`);
            
            // Rechercher un √©v√©nement de type 'rendez_vous' li√© √† ce projet
            const { data: existingEvent, error } = await supabase
                .from('evenement')
                .select(`
                    id,
                    titre,
                    description,
                    date_debut,
                    date_fin,
                    user_id,
                    statut,
                    user_profile:user_id (
                        prenom,
                        nom
                    )
                `)
                .eq('projet_id', projectId)
                .eq('type_evenement', 'rendez_vous')
                .eq('statut', 'confirme')
                .single();

            if (error) {
                // Si pas d'√©v√©nement trouv√©, c'est normal
                if (error.code === 'PGRST116') {
                    console.log('‚ÑπÔ∏è [getExistingAppointment] Aucun RDV existant trouv√©');
                    return null;
                }
                throw error;
            }

            if (existingEvent) {
                // Convertir les dates UTC en dates locales pour l'affichage
                const dateDebut = new Date(existingEvent.date_debut);
                const dateFin = new Date(existingEvent.date_fin);
                
                console.log('‚úÖ [getExistingAppointment] RDV existant trouv√©:', {
                    id: existingEvent.id,
                    date: dateDebut.toLocaleDateString('fr-FR'),
                    heure: dateDebut.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                    formateur: `${existingEvent.user_profile?.prenom} ${existingEvent.user_profile?.nom}`
                });

                return {
                    id: existingEvent.id,
                    date: dateDebut.toLocaleDateString('fr-FR'),
                    heure: dateDebut.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                    formateurNom: `${existingEvent.user_profile?.prenom} ${existingEvent.user_profile?.nom}`,
                    formateurId: existingEvent.user_id,
                    dateDebut: existingEvent.date_debut,
                    dateFin: existingEvent.date_fin,
                    titre: existingEvent.titre,
                    description: existingEvent.description,
                    statut: existingEvent.statut
                };
            }

            return null;
        } catch (err) {
            console.error('‚ùå [getExistingAppointment] Erreur:', err);
            return null;
        }
    }, [supabase]);
    
    // Supprimer un RDV existant
    const deleteExistingAppointment = useCallback(async (appointmentId) => {
        try {
            console.log(`üóëÔ∏è [deleteExistingAppointment] Suppression du RDV existant:`, appointmentId);
            setError(null);
            
            // Supprimer l'√©v√©nement de type 'rendez_vous'
            const { error: deleteError } = await supabase
                .from('evenement')
                .delete()
                .eq('id', appointmentId);
            
            if (deleteError) throw deleteError;
            
            console.log('‚úÖ [deleteExistingAppointment] RDV supprim√© avec succ√®s');
            return true;
        } catch (err) {
            console.error('‚ùå [deleteExistingAppointment] Erreur lors de la suppression du RDV:', err);
            setError(err.message);
            return false;
        }
    }, [supabase]);
    
    // Modifier un RDV existant
    const modifyAppointment = useCallback(async (existingAppointment, slot, date, tacheId, projectId, logicielId) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('üîÑ [modifyAppointment] Modification du RDV existant:', existingAppointment);
            console.log('üîÑ [modifyAppointment] Nouveau cr√©neau:', slot);
            console.log('üîÑ [modifyAppointment] Nouvelle date:', date);
            
            // S√©lectionner le formateur le moins charg√© (premier dans la liste pour simplifier)
            const selectedFormateur = slot.availableFormateurs[0];
            
            // Cr√©er les timestamps pour le nouveau RDV en UTC
            const startDateTimeUTC = createUTCDateTimeFromLocal(date, slot.startTime);
            const endDateTimeUTC = createUTCDateTimeFromLocal(date, slot.endTime);
            
            console.log(`üíæ Modification RDV - Conversion timezone:`);
            console.log(`   üåê UTC: ${startDateTimeUTC} - ${endDateTimeUTC}`);
            console.log(`   üåç Local: ${new Date(startDateTimeUTC).toLocaleString()} - ${new Date(endDateTimeUTC).toLocaleString()}`);
            
            // R√©cup√©rer les informations du logiciel pour le titre
            const { data: logicielData } = await supabase
                .from('logiciel')
                .select('nom')
                .eq('id', logicielId)
                .single();
            
            // Mettre √† jour l'√©v√©nement existant
            const { data: eventData, error: eventError } = await supabase
                .from('evenement')
                .update({
                    titre: `RDV Qualification - ${logicielData?.nom || 'Formation'}`,
                    description: `Rendez-vous de qualification avec le formateur pour d√©finir le plan de formation (modifi√©)`,
                    date_debut: startDateTimeUTC,
                    date_fin: endDateTimeUTC,
                    user_id: selectedFormateur.id
                })
                .eq('id', existingAppointment.id)
                .select()
                .single();
            
            if (eventError) throw eventError;
            
            // Mettre √† jour la description de la t√¢che "Demande de qualification"
            const newDescription = `RDV le ${new Date(startDateTimeUTC).toLocaleDateString('fr-FR')} √† ${slot.startTime} avec le formateur ${selectedFormateur.prenom} ${selectedFormateur.nom}`;
            console.log("üîÑ [modifyAppointment] Mise √† jour de la description de la t√¢che:", newDescription);
            
            const { error: taskDescriptionError } = await supabase
                .from('tasks')
                .update({ 
                    description: newDescription,
                    updated_at: new Date().toISOString()
                })
                .eq('id', tacheId);
            
            if (taskDescriptionError) {
                console.log("‚ö†Ô∏è [modifyAppointment] Erreur lors de la mise √† jour de la description:", taskDescriptionError);
                // Ne pas √©chouer la modification du RDV si la mise √† jour de description √©choue
            }
            
            // Mettre √† jour la t√¢che "qualification" si elle existe (sans crit√®re d'assignation)
            console.log("üîÑ [modifyAppointment] Mise √† jour de la t√¢che Qualification...");
            
            const { data: updatedTaskData, error: updateTaskError } = await supabase
                .from('tasks')
                .update({
                    assigned_to: selectedFormateur.id,
                    description: `Qualifier le client et d√©finir le plan de formation adapt√© lors du rendez-vous du ${new Date(startDateTimeUTC).toLocaleDateString('fr-FR')} √† ${slot.startTime} (modifi√©)`,
                    status: 'todo',
                    updated_at: new Date().toISOString()
                })
                .eq('project_id', projectId)
                .eq('title', 'Qualification')
                .eq('workflow_order', 2)
                .select()
                .single();
            
            if (updateTaskError) {
                console.log("‚ö†Ô∏è [modifyAppointment] Erreur lors de la mise √† jour de la t√¢che Qualification:", updateTaskError);
                // Ne pas √©chouer la modification du RDV si la t√¢che n'est pas trouv√©e
            } else {
                console.log("‚úÖ [modifyAppointment] T√¢che Qualification mise √† jour:", updatedTaskData);
            }
            
            return {
                event: eventData,
                task: updatedTaskData,
                formateur: selectedFormateur,
                appointmentDetails: {
                    date: date.toLocaleDateString('fr-FR'),
                    time: slot.display,
                    formateurName: `${selectedFormateur.prenom} ${selectedFormateur.nom}`
                }
            };
            
        } catch (err) {
            console.error('Erreur lors de la modification du RDV:', err);
            setError(err.message);
            throw err;
        } finally {
            setLoading(false);
        }
    }, [supabase, createUTCDateTimeFromLocal]);
    
    // NOUVELLE FONCTION: Synchronisation bidirectionnelle projet ‚Üî √©v√©nements
    const synchronizeProjectStagiaires = useCallback(async (projectId) => {
        try {
            console.log(`üîÑ [synchronizeProjectStagiaires] D√©but synchronisation pour projet ${projectId}`);
            
            // R√©cup√©rer les stagiaires du projet
            const { data: projectData, error: projectError } = await supabase
                .from('projects')
                .select('stagiaires')
                .eq('id', projectId)
                .single();
            
            if (projectError) {
                console.error('‚ùå [synchronizeProjectStagiaires] Erreur r√©cup√©ration projet:', projectError);
                return false;
            }
            
            const projectStagiaires = projectData?.stagiaires || [];
            console.log(`üìä [synchronizeProjectStagiaires] Stagiaires du projet:`, projectStagiaires);
            
            // R√©cup√©rer tous les √©v√©nements de formation pour ce projet
            const { data: events, error: eventsError } = await supabase
                .from('evenement')
                .select('id, client_user_id')
                .eq('projet_id', projectId)
                .eq('type_evenement', 'formation');
            
            if (eventsError) {
                console.error('‚ùå [synchronizeProjectStagiaires] Erreur r√©cup√©ration √©v√©nements:', eventsError);
                return false;
            }
            
            console.log(`üìÖ [synchronizeProjectStagiaires] ${events.length} √©v√©nement(s) de formation trouv√©(s)`);
            
            // Mettre √† jour tous les √©v√©nements avec les stagiaires du projet
            const updatePromises = events.map(async (event) => {
                const currentStagiaires = event.client_user_id || [];
                
                // Comparer les arrays
                const needsUpdate = JSON.stringify(currentStagiaires.sort()) !== JSON.stringify(projectStagiaires.sort());
                
                if (needsUpdate) {
                    console.log(`üîÑ [synchronizeProjectStagiaires] Mise √† jour √©v√©nement ${event.id}:`);
                    console.log(`   Ancien: ${currentStagiaires.length} stagiaire(s)`);
                    console.log(`   Nouveau: ${projectStagiaires.length} stagiaire(s)`);
                    
                    const { error: updateError } = await supabase
                        .from('evenement')
                        .update({ client_user_id: projectStagiaires })
                        .eq('id', event.id);
                    
                    if (updateError) {
                        console.error(`‚ùå [synchronizeProjectStagiaires] Erreur mise √† jour √©v√©nement ${event.id}:`, updateError);
                        return false;
                    }
                    
                    console.log(`‚úÖ [synchronizeProjectStagiaires] √âv√©nement ${event.id} mis √† jour`);
                    return true;
                } else {
                    console.log(`‚ÑπÔ∏è [synchronizeProjectStagiaires] √âv√©nement ${event.id} d√©j√† √† jour`);
                    return true;
                }
            });
            
            const results = await Promise.all(updatePromises);
            const successCount = results.filter(Boolean).length;
            
            console.log(`‚úÖ [synchronizeProjectStagiaires] Synchronisation termin√©e: ${successCount}/${events.length} √©v√©nement(s) trait√©(s)`);
            return successCount === events.length;
            
        } catch (err) {
            console.error('‚ùå [synchronizeProjectStagiaires] Erreur:', err);
            return false;
        }
    }, [supabase]);
    
    // NOUVELLE FONCTION: Synchroniser projet.stagiaires depuis les √©v√©nements
    const updateProjectStagiairesFromEvents = useCallback(async (projectId) => {
        try {
            console.log(`üîÑ [updateProjectStagiairesFromEvents] D√©but mise √† jour projet ${projectId}`);
            
            // R√©cup√©rer tous les stagiaires uniques des √©v√©nements de ce projet
            const { data: events, error: eventsError } = await supabase
                .from('evenement')
                .select('client_user_id')
                .eq('projet_id', projectId)
                .eq('type_evenement', 'formation');
            
            if (eventsError) {
                console.error('‚ùå [updateProjectStagiairesFromEvents] Erreur r√©cup√©ration √©v√©nements:', eventsError);
                return false;
            }
            
            // Collecter tous les stagiaires uniques
            const allStagiaires = [...new Set(events.flatMap(event => event.client_user_id || []))];
            console.log(`üë• [updateProjectStagiairesFromEvents] Stagiaires trouv√©s dans les √©v√©nements:`, allStagiaires);
            
            // Mettre √† jour le projet avec ces stagiaires
            const { error: updateError } = await supabase
                .from('projects')
                .update({ stagiaires: allStagiaires })
                .eq('id', projectId);
            
            if (updateError) {
                console.error('‚ùå [updateProjectStagiairesFromEvents] Erreur mise √† jour projet:', updateError);
                return false;
            }
            
            console.log(`‚úÖ [updateProjectStagiairesFromEvents] Projet ${projectId} mis √† jour avec ${allStagiaires.length} stagiaire(s)`);
            return true;
            
        } catch (err) {
            console.error('‚ùå [updateProjectStagiairesFromEvents] Erreur:', err);
            return false;
        }
    }, [supabase]);
    
    return {
        loading,
        error,
        getFormateursByLogiciel,
        getAvailableSlots,
        bookAppointment,
        generateTimeSlots,
        // Nouvelles fonctions pour les sessions
        getAvailableSlotsForSession,
        bookSessionAppointment,
        modifySessionAppointment,
        generateSessionTimeSlots,
        isFormateurAvailableMultiDays,
        // Nouvelles fonctions pour les indicateurs de disponibilit√©
        checkDayAvailability,
        checkConsecutiveDaysAvailability,
        getAvailabilityForCalendarMonth,
        // Fonction de debugging
        clearAvailabilityCache,
        // Nouvelle fonction pour v√©rifier les RDV existants
        getExistingAppointment,
        // Nouvelle fonction pour supprimer un RDV existant
        deleteExistingAppointment,
        // Nouvelle fonction pour modifier un RDV existant
        modifyAppointment,
        // Nouvelles fonctions de synchronisation
        synchronizeProjectStagiaires,
        updateProjectStagiairesFromEvents
    };
}

// Export global
window.useFormateurs = useFormateurs;