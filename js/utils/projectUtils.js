// Utilitaires pour la gestion des projets de formation
console.log("üî• [CHARGEMENT] projectUtils.js CHARG√â!");

/**
 * Formate le lieu du projet bas√© sur les sessions de formation
 * @param {Array} sessions - Array des sessions avec leurs lieux
 * @returns {string} Lieu format√© pour le champ lieu_projet
 */
function formatLieuProjet(sessions) {
    console.log('üè¢ [formatLieuProjet] Formatage du lieu pour', sessions.length, 'session(s)');
    
    if (!sessions || sessions.length === 0) {
        console.log('‚ö†Ô∏è [formatLieuProjet] Aucune session fournie');
        return '';
    }
    
    // Filtrer les sessions avec des lieux valides (accepter "√Ä distance" mais pas "√Ä d√©finir")
    const sessionsAvecLieu = sessions.filter(session => 
        session.lieu && session.lieu.trim() !== '' && session.lieu !== '√Ä d√©finir'
    );
    
    console.log('üîç [formatLieuProjet] Sessions avec lieu valide:', sessionsAvecLieu.map(s => `${s.sessionNumber || 'N/A'}: ${s.lieu}`));
    
    if (sessionsAvecLieu.length === 0) {
        console.log('‚ö†Ô∏è [formatLieuProjet] Aucune session avec lieu d√©fini');
        return '√Ä d√©finir';
    }
    
    // Si une seule session ou toutes les sessions ont le m√™me lieu
    if (sessionsAvecLieu.length === 1) {
        const lieu = sessionsAvecLieu[0].lieu;
        console.log('üè¢ [formatLieuProjet] Une seule session:', lieu);
        return lieu;
    }
    
    // V√©rifier si tous les lieux sont identiques
    const premierLieu = sessionsAvecLieu[0].lieu;
    const tousIdentiques = sessionsAvecLieu.every(session => session.lieu === premierLieu);
    
    if (tousIdentiques) {
        console.log('üè¢ [formatLieuProjet] Tous les lieux identiques:', premierLieu);
        return premierLieu;
    }
    
    // Plusieurs sessions avec des lieux diff√©rents - formater "session X: lieu"
    const lieuxFormatt√©s = sessionsAvecLieu.map((session, index) => {
        const sessionNumber = session.sessionNumber || (index + 1);
        return `session ${sessionNumber}: ${session.lieu}`;
    });
    
    const resultat = lieuxFormatt√©s.join(' ');
    console.log('üè¢ [formatLieuProjet] Lieux multiples format√©s:', resultat);
    
    return resultat;
}

/**
 * Extrait et formate les lieux depuis les √©v√©nements de formation
 * @param {Array} events - Array des √©v√©nements de formation
 * @returns {string} Lieu format√© pour le champ lieu_projet
 */
function formatLieuProjetFromEvents(events) {
    console.log('üìÖ [formatLieuProjetFromEvents] Formatage depuis', events.length, '√©v√©nement(s)');
    
    if (!events || events.length === 0) {
        return '';
    }
    
    // Grouper les √©v√©nements par session (bas√© sur le titre)
    const sessionGroups = {};
    
    events.forEach(event => {
        // Extraire le num√©ro de session du titre "Formation X - Session Y"
        const sessionMatch = event.titre?.match(/Session (\d+)/);
        const sessionNumber = sessionMatch ? parseInt(sessionMatch[1]) : 1;
        
        if (!sessionGroups[sessionNumber]) {
            sessionGroups[sessionNumber] = {
                sessionNumber,
                lieu: event.lieu || '√Ä d√©finir',
                events: []
            };
        } else {
            // CORRECTION: Mettre √† jour le lieu si l'√©v√©nement actuel a un lieu plus r√©cent/sp√©cifique
            const currentLieu = sessionGroups[sessionNumber].lieu;
            const eventLieu = event.lieu || '√Ä d√©finir';
            
            // Priorit√© : adresse sp√©cifique > "√Ä distance" > "√Ä d√©finir"
            if (currentLieu === '√Ä d√©finir' || 
                (currentLieu === '√Ä distance' && eventLieu !== '√Ä distance' && eventLieu !== '√Ä d√©finir')) {
                sessionGroups[sessionNumber].lieu = eventLieu;
                console.log(`üîÑ [formatLieuProjetFromEvents] Session ${sessionNumber}: lieu mis √† jour de "${currentLieu}" vers "${eventLieu}"`);
            }
        }
        
        sessionGroups[sessionNumber].events.push(event);
    });
    
    // Convertir en array de sessions
    const sessions = Object.values(sessionGroups);
    
    console.log('üìÖ [formatLieuProjetFromEvents] Sessions extraites:', sessions.map(s => `Session ${s.sessionNumber}: ${s.lieu}`));
    
    return formatLieuProjet(sessions);
}

/**
 * Met √† jour le champ lieu_projet d'un projet bas√© sur ses √©v√©nements de formation
 * @param {string} projectId - ID du projet
 * @param {Object} supabase - Client Supabase
 * @returns {Promise<string|null>} Le lieu format√© ou null en cas d'erreur
 */
async function updateProjectLieuFromEvents(projectId, supabase) {
    try {
        console.log(`üîÑ [updateProjectLieuFromEvents] Mise √† jour lieu pour projet ${projectId}`);
        
        // R√©cup√©rer tous les √©v√©nements de formation pour ce projet
        const { data: events, error: eventsError } = await supabase
            .from('evenement')
            .select('id, titre, lieu, date_debut')
            .eq('projet_id', projectId)
            .eq('type_evenement', 'formation')
            .order('date_debut', { ascending: true });
        
        if (eventsError) {
            console.error('‚ùå [updateProjectLieuFromEvents] Erreur r√©cup√©ration √©v√©nements:', eventsError);
            return null;
        }
        
        if (!events || events.length === 0) {
            console.log('‚ÑπÔ∏è [updateProjectLieuFromEvents] Aucun √©v√©nement de formation trouv√©');
            return null;
        }
        
        console.log('üìã [updateProjectLieuFromEvents] √âv√©nements r√©cup√©r√©s:', events.map(e => ({
            id: e.id,
            titre: e.titre,
            lieu: e.lieu,
            date: e.date_debut
        })));
        
        // Formater le lieu bas√© sur les √©v√©nements
        const lieuFormatt√© = formatLieuProjetFromEvents(events);
        
        console.log(`üè¢ [updateProjectLieuFromEvents] Lieu format√© g√©n√©r√©: "${lieuFormatt√©}"`);
        
        if (!lieuFormatt√© || lieuFormatt√© === '') {
            console.log('‚ö†Ô∏è [updateProjectLieuFromEvents] Aucun lieu format√© g√©n√©r√©');
            return null;
        }
        
        // Mettre √† jour le projet
        const { error: updateError } = await supabase
            .from('projects')
            .update({ lieu_projet: lieuFormatt√© })
            .eq('id', projectId);
        
        if (updateError) {
            console.error('‚ùå [updateProjectLieuFromEvents] Erreur mise √† jour projet:', updateError);
            return null;
        }
        
        console.log(`‚úÖ [updateProjectLieuFromEvents] Projet ${projectId} mis √† jour avec lieu: "${lieuFormatt√©}"`);
        return lieuFormatt√©;
        
    } catch (error) {
        console.error('‚ùå [updateProjectLieuFromEvents] Erreur:', error);
        return null;
    }
}

/**
 * Synchronise le lieu_projet avec les sessions de formation d'un projet
 * Fonction utilitaire qui peut √™tre appel√©e depuis diff√©rents endroits
 * @param {string} projectId - ID du projet
 * @param {Array} sessions - Array des sessions (optionnel, sinon r√©cup√©r√© depuis la DB)
 * @param {Object} supabase - Client Supabase
 * @returns {Promise<boolean>} Succ√®s de la synchronisation
 */
async function synchronizeProjectLieu(projectId, sessions = null, supabase) {
    try {
        console.log(`üîÑ [synchronizeProjectLieu] Synchronisation lieu pour projet ${projectId}`);
        
        let lieuFormatt√©;
        
        if (sessions && sessions.length > 0) {
            // Utiliser les sessions fournies
            lieuFormatt√© = formatLieuProjet(sessions);
            console.log('üìã [synchronizeProjectLieu] Utilisation des sessions fournies');
        } else {
            // R√©cup√©rer et formater depuis les √©v√©nements
            lieuFormatt√© = await updateProjectLieuFromEvents(projectId, supabase);
            if (lieuFormatt√© === null) {
                return false;
            }
            console.log('üìÖ [synchronizeProjectLieu] R√©cup√©ration depuis les √©v√©nements');
        }
        
        if (sessions && sessions.length > 0) {
            // Mettre √† jour le projet avec le lieu format√©
            const { error: updateError } = await supabase
                .from('projects')
                .update({ lieu_projet: lieuFormatt√© })
                .eq('id', projectId);
            
            if (updateError) {
                console.error('‚ùå [synchronizeProjectLieu] Erreur mise √† jour projet:', updateError);
                return false;
            }
            
            console.log(`‚úÖ [synchronizeProjectLieu] Projet ${projectId} synchronis√© avec lieu: "${lieuFormatt√©}"`);
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå [synchronizeProjectLieu] Erreur:', error);
        return false;
    }
}

/**
 * Formate une date au format fran√ßais (DD/MM/YYYY) sans probl√®me de timezone
 * @param {Date|string} date - Date √† formater
 * @returns {string} Date format√©e
 */
function formatDateFR(date) {
    if (!date) return '';
    
    // Utiliser le nouvel utilitaire DateUtils pour √©viter les probl√®mes de timezone
    if (window.DateUtils && window.DateUtils.formatDateLocaleSafe) {
        return window.DateUtils.formatDateLocaleSafe(date);
    }
    
    // Fallback si DateUtils n'est pas encore charg√©
    console.warn('‚ö†Ô∏è [formatDateFR] DateUtils non disponible, utilisation du fallback');
    const d = new Date(date);
    if (isNaN(d.getTime())) return '';
    return d.toLocaleDateString('fr-FR');
}

/**
 * Formate une plage de dates au format "du X au Y" sans probl√®me de timezone
 * @param {Date|string} dateDebut - Date de d√©but
 * @param {Date|string} dateFin - Date de fin
 * @returns {string} Plage format√©e
 */
function formatDateRange(dateDebut, dateFin) {
    // Utiliser le nouvel utilitaire DateUtils pour √©viter les probl√®mes de timezone
    if (window.DateUtils && window.DateUtils.formatDateRangeSafe) {
        return window.DateUtils.formatDateRangeSafe(dateDebut, dateFin);
    }
    
    // Fallback avec l'ancienne m√©thode
    console.warn('‚ö†Ô∏è [formatDateRange] DateUtils non disponible, utilisation du fallback');
    const debut = formatDateFR(dateDebut);
    const fin = formatDateFR(dateFin);
    
    if (!debut && !fin) return '';
    if (!fin || debut === fin) return debut;
    return `du ${debut} au ${fin}`;
}

/**
 * Formate la p√©riode du projet bas√©e sur les sessions de formation
 * @param {Array} sessions - Array des sessions avec leurs dates
 * @returns {string} P√©riode format√©e pour le champ periode_souhaitee
 */
function formatPeriodeProjet(sessions) {
    console.log('üìÖ [formatPeriodeProjet] Formatage de la p√©riode pour', sessions.length, 'session(s)');
    
    if (!sessions || sessions.length === 0) {
        console.log('‚ö†Ô∏è [formatPeriodeProjet] Aucune session fournie');
        return '';
    }
    
    // Filtrer les sessions avec des dates valides
    const sessionsAvecDates = sessions.filter(session => 
        session.dateDebut && session.dateFin
    );
    
    if (sessionsAvecDates.length === 0) {
        console.log('‚ö†Ô∏è [formatPeriodeProjet] Aucune session avec dates d√©finies');
        return '√Ä d√©finir';
    }
    
    // Si une seule session
    if (sessionsAvecDates.length === 1) {
        const periode = formatDateRange(sessionsAvecDates[0].dateDebut, sessionsAvecDates[0].dateFin);
        console.log('üìÖ [formatPeriodeProjet] Une seule session:', periode);
        return periode;
    }
    
    // Plusieurs sessions - formater "session X: du Y au Z"
    const periodesFormat√©es = sessionsAvecDates.map((session, index) => {
        const sessionNumber = session.sessionNumber || (index + 1);
        const periode = formatDateRange(session.dateDebut, session.dateFin);
        return `session ${sessionNumber}: ${periode}`;
    });
    
    const resultat = periodesFormat√©es.join(', ');
    console.log('üìÖ [formatPeriodeProjet] P√©riodes multiples format√©es:', resultat);
    
    return resultat;
}

/**
 * Extrait et formate les p√©riodes depuis les √©v√©nements de formation
 * @param {Array} events - Array des √©v√©nements de formation
 * @returns {string} P√©riode format√©e pour le champ periode_souhaitee
 */
function formatPeriodeProjetFromEvents(events) {
    console.log('üìÖ [formatPeriodeProjetFromEvents] Formatage depuis', events.length, '√©v√©nement(s)');
    
    if (!events || events.length === 0) {
        return '';
    }
    
    // Grouper les √©v√©nements par session (bas√© sur le titre)
    const sessionGroups = {};
    
    events.forEach(event => {
        // Extraire le num√©ro de session du titre "Formation X - Session Y"
        const sessionMatch = event.titre?.match(/Session (\d+)/);
        const sessionNumber = sessionMatch ? parseInt(sessionMatch[1]) : 1;
        
        if (!sessionGroups[sessionNumber]) {
            sessionGroups[sessionNumber] = {
                sessionNumber,
                dateDebut: event.date_debut,
                dateFin: event.date_fin,
                events: []
            };
        }
        
        // Mettre √† jour les dates min/max pour la session
        const currentDebut = new Date(sessionGroups[sessionNumber].dateDebut);
        const currentFin = new Date(sessionGroups[sessionNumber].dateFin);
        const eventDebut = new Date(event.date_debut);
        const eventFin = new Date(event.date_fin);
        
        if (eventDebut < currentDebut) {
            sessionGroups[sessionNumber].dateDebut = event.date_debut;
        }
        if (eventFin > currentFin) {
            sessionGroups[sessionNumber].dateFin = event.date_fin;
        }
        
        sessionGroups[sessionNumber].events.push(event);
    });
    
    // Convertir en array de sessions
    const sessions = Object.values(sessionGroups);
    
    console.log('üìÖ [formatPeriodeProjetFromEvents] Sessions extraites:', 
        sessions.map(s => `Session ${s.sessionNumber}: ${formatDateRange(s.dateDebut, s.dateFin)}`));
    
    return formatPeriodeProjet(sessions);
}

/**
 * Met √† jour le champ periode_souhaitee d'un projet bas√© sur ses √©v√©nements de formation
 * @param {string} projectId - ID du projet
 * @param {Object} supabase - Client Supabase
 * @returns {Promise<string|null>} La p√©riode format√©e ou null en cas d'erreur
 */
async function updateProjectPeriodeFromEvents(projectId, supabase) {
    try {
        console.log(`üîÑ [updateProjectPeriodeFromEvents] Mise √† jour p√©riode pour projet ${projectId}`);
        
        // R√©cup√©rer tous les √©v√©nements de formation pour ce projet
        const { data: events, error: eventsError } = await supabase
            .from('evenement')
            .select('id, titre, date_debut, date_fin')
            .eq('projet_id', projectId)
            .eq('type_evenement', 'formation')
            .order('date_debut', { ascending: true });
        
        if (eventsError) {
            console.error('‚ùå [updateProjectPeriodeFromEvents] Erreur r√©cup√©ration √©v√©nements:', eventsError);
            return null;
        }
        
        if (!events || events.length === 0) {
            console.log('‚ÑπÔ∏è [updateProjectPeriodeFromEvents] Aucun √©v√©nement de formation trouv√©');
            return null;
        }
        
        // Formater la p√©riode bas√©e sur les √©v√©nements
        const periodeFormat√©e = formatPeriodeProjetFromEvents(events);
        
        if (!periodeFormat√©e) {
            console.log('‚ö†Ô∏è [updateProjectPeriodeFromEvents] Aucune p√©riode format√©e g√©n√©r√©e');
            return null;
        }
        
        // Mettre √† jour le projet
        const { error: updateError } = await supabase
            .from('projects')
            .update({ periode_souhaitee: periodeFormat√©e })
            .eq('id', projectId);
        
        if (updateError) {
            console.error('‚ùå [updateProjectPeriodeFromEvents] Erreur mise √† jour projet:', updateError);
            return null;
        }
        
        console.log(`‚úÖ [updateProjectPeriodeFromEvents] Projet ${projectId} mis √† jour avec p√©riode: "${periodeFormat√©e}"`);
        return periodeFormat√©e;
        
    } catch (error) {
        console.error('‚ùå [updateProjectPeriodeFromEvents] Erreur:', error);
        return null;
    }
}

/**
 * Synchronise le periode_souhaitee avec les sessions de formation d'un projet
 * @param {string} projectId - ID du projet
 * @param {Array} sessions - Array des sessions (optionnel, sinon r√©cup√©r√© depuis la DB)
 * @param {Object} supabase - Client Supabase
 * @returns {Promise<boolean>} Succ√®s de la synchronisation
 */
async function synchronizeProjectPeriode(projectId, sessions = null, supabase) {
    try {
        console.log(`üîÑ [synchronizeProjectPeriode] Synchronisation p√©riode pour projet ${projectId}`);
        
        let periodeFormat√©e;
        
        if (sessions && sessions.length > 0) {
            // Utiliser les sessions fournies
            periodeFormat√©e = formatPeriodeProjet(sessions);
            console.log('üìã [synchronizeProjectPeriode] Utilisation des sessions fournies');
        } else {
            // R√©cup√©rer et formater depuis les √©v√©nements
            periodeFormat√©e = await updateProjectPeriodeFromEvents(projectId, supabase);
            if (periodeFormat√©e === null) {
                return false;
            }
            console.log('üìÖ [synchronizeProjectPeriode] R√©cup√©ration depuis les √©v√©nements');
        }
        
        if (sessions && sessions.length > 0) {
            // Mettre √† jour le projet avec la p√©riode format√©e
            const { error: updateError } = await supabase
                .from('projects')
                .update({ periode_souhaitee: periodeFormat√©e })
                .eq('id', projectId);
            
            if (updateError) {
                console.error('‚ùå [synchronizeProjectPeriode] Erreur mise √† jour projet:', updateError);
                return false;
            }
            
            console.log(`‚úÖ [synchronizeProjectPeriode] Projet ${projectId} synchronis√© avec p√©riode: "${periodeFormat√©e}"`);
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå [synchronizeProjectPeriode] Erreur:', error);
        return false;
    }
}

// Export des fonctions
window.projectUtils = {
    formatLieuProjet,
    formatLieuProjetFromEvents,
    updateProjectLieuFromEvents,
    synchronizeProjectLieu,
    // Nouvelles fonctions pour les p√©riodes
    formatDateFR,
    formatDateRange,
    formatPeriodeProjet,
    formatPeriodeProjetFromEvents,
    updateProjectPeriodeFromEvents,
    synchronizeProjectPeriode
};

console.log('üì¶ [projectUtils] Fonctions export√©es:', Object.keys(window.projectUtils));