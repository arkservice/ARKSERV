// Script de migration pour corriger les donn√©es de planification de formations
// √Ä ex√©cuter depuis la console du navigateur une fois connect√© √† l'application

// √âTAPE 1: Identifier les projets avec incoh√©rences (stagiaires ET lieux)
async function analyserIncoh√©rences() {
    console.log('üîç === ANALYSE DES INCOH√âRENCES ===');
    
    const supabase = window.supabaseConfig.client;
    
    // R√©cup√©rer tous les projets de formation
    const { data: projects, error: projectsError } = await supabase
        .from('projects')
        .select('id, name, stagiaires, entreprise_id, type')
        .eq('type', 'formation');
    
    if (projectsError) {
        console.error('‚ùå Erreur r√©cup√©ration projets:', projectsError);
        return;
    }
    
    console.log(`üìä ${projects.length} projet(s) de formation trouv√©(s)`);
    
    const incoh√©rences = [];
    
    for (const project of projects) {
        console.log(`\nüîç Analyse du projet: ${project.name} (${project.id})`);
        
        // R√©cup√©rer tous les √©v√©nements de formation pour ce projet
        const { data: events, error: eventsError } = await supabase
            .from('evenement')
            .select('id, titre, client_user_id, date_debut')
            .eq('projet_id', project.id)
            .eq('type_evenement', 'formation');
        
        if (eventsError) {
            console.error(`‚ùå Erreur r√©cup√©ration √©v√©nements pour projet ${project.id}:`, eventsError);
            continue;
        }
        
        // Analyser les incoh√©rences STAGIAIRES
        const projectStagiaires = project.stagiaires || [];
        const eventsWithStagiaires = events.filter(e => e.client_user_id && e.client_user_id.length > 0);
        const eventsWithoutStagiaires = events.filter(e => !e.client_user_id || e.client_user_id.length === 0);
        
        // Collecter tous les stagiaires uniques des √©v√©nements
        const eventStagiaires = [...new Set(events.flatMap(e => e.client_user_id || []))];
        
        // Analyser les incoh√©rences LIEUX
        const projectLieu = project.lieu_projet || '';
        const eventLieux = [...new Set(events.map(e => e.lieu || '√Ä d√©finir'))];
        const lieuFormat√©Attendu = window.projectUtils ? 
            window.projectUtils.formatLieuProjetFromEvents(events) : 
            eventLieux.join(', ');
        
        // Analyser les incoh√©rences P√âRIODES
        const projectPeriode = project.periode_souhaitee || '';
        const periodeFormat√©eAttendue = window.projectUtils ? 
            window.projectUtils.formatPeriodeProjetFromEvents(events) : 
            '√Ä d√©finir';
        
        console.log(`   üìä Projet: ${projectStagiaires.length} stagiaire(s), lieu: "${projectLieu}", p√©riode: "${projectPeriode}"`);
        console.log(`   üìÖ √âv√©nements: ${events.length} total, ${eventsWithStagiaires.length} avec stagiaires, ${eventsWithoutStagiaires.length} sans stagiaires`);
        console.log(`   üë• Stagiaires uniques dans √©v√©nements: ${eventStagiaires.length}`);
        console.log(`   üè¢ Lieux uniques dans √©v√©nements: ${eventLieux.length} (${eventLieux.join(', ')})`);
        console.log(`   üè¢ Lieu format√© attendu: "${lieuFormat√©Attendu}"`);
        console.log(`   üìÖ P√©riode format√©e attendue: "${periodeFormat√©eAttendue}"`);
        
        // D√©tecter les incoh√©rences
        const stagiaireIncoh√©rent = 
            projectStagiaires.length === 0 || // Projet sans stagiaires
            eventsWithoutStagiaires.length > 0 || // √âv√©nements sans stagiaires
            JSON.stringify(projectStagiaires.sort()) !== JSON.stringify(eventStagiaires.sort()); // D√©synchronisation
        
        const lieuIncoh√©rent = 
            !projectLieu || projectLieu === '' || projectLieu === '√Ä d√©finir' || // Projet sans lieu
            projectLieu !== lieuFormat√©Attendu; // Lieu projet diff√©rent du format√©
        
        const periodeIncoh√©rente = 
            !projectPeriode || projectPeriode === '' || projectPeriode === '√Ä d√©finir' || // Projet sans p√©riode
            projectPeriode !== periodeFormat√©eAttendue; // P√©riode projet diff√©rente de la format√©e
        
        const hasIncoh√©rence = stagiaireIncoh√©rent || lieuIncoh√©rent || periodeIncoh√©rente;
        
        if (hasIncoh√©rence) {
            const incoh√©rence = {
                projectId: project.id,
                projectName: project.name,
                // Donn√©es stagiaires
                projectStagiaires,
                eventStagiaires,
                eventsTotal: events.length,
                eventsWithStagiaires: eventsWithStagiaires.length,
                eventsWithoutStagiaires: eventsWithoutStagiaires.length,
                stagiaireIncoh√©rent,
                // Donn√©es lieux
                projectLieu,
                eventLieux,
                lieuFormat√©Attendu,
                lieuIncoh√©rent,
                // Donn√©es p√©riodes
                projectPeriode,
                periodeFormat√©eAttendue,
                periodeIncoh√©rente,
                events: events.map(e => ({
                    id: e.id,
                    titre: e.titre,
                    clientUserIds: e.client_user_id || [],
                    lieu: e.lieu || '√Ä d√©finir',
                    dateDebut: e.date_debut
                }))
            };
            
            incoh√©rences.push(incoh√©rence);
            const typesIncoh√©rences = [
                stagiaireIncoh√©rent ? 'Stagiaires' : '',
                lieuIncoh√©rent ? 'Lieux' : '',
                periodeIncoh√©rente ? 'P√©riodes' : ''
            ].filter(Boolean);
            console.log(`   ‚ö†Ô∏è INCOH√âRENCE D√âTECT√âE:`, typesIncoh√©rences.join(', '));
        } else {
            console.log(`   ‚úÖ Donn√©es coh√©rentes`);
        }
    }
    
    console.log(`\nüìä === R√âSUM√â DE L'ANALYSE ===`);
    console.log(`‚úÖ Projets coh√©rents: ${projects.length - incoh√©rences.length}`);
    console.log(`‚ö†Ô∏è Projets avec incoh√©rences: ${incoh√©rences.length}`);
    
    return incoh√©rences;
}

// √âTAPE 2: Corriger les incoh√©rences
async function corrigerIncoh√©rences(incoh√©rences) {
    console.log('\nüîß === CORRECTION DES INCOH√âRENCES ===');
    
    const supabase = window.supabaseConfig.client;
    let correctionCount = 0;
    
    for (const incoh√©rence of incoh√©rences) {
        console.log(`\nüîß Correction du projet: ${incoh√©rence.projectName} (${incoh√©rence.projectId})`);
        
        // Strat√©gie de correction STAGIAIRES:
        // 1. Si le projet a des stagiaires mais les √©v√©nements non -> propager vers √©v√©nements
        // 2. Si les √©v√©nements ont des stagiaires mais pas le projet -> propager vers projet
        // 3. Si diff√©rence -> utiliser l'union des deux listes
        
        let stagiairesFinal = [];
        let strat√©gieStag = '';
        
        if (incoh√©rence.stagiaireIncoh√©rent) {
            if (incoh√©rence.projectStagiaires.length > 0 && incoh√©rence.eventStagiaires.length === 0) {
                // Cas 1: Projet a des stagiaires, √©v√©nements non
                stagiairesFinal = incoh√©rence.projectStagiaires;
                strat√©gieStag = 'Propager stagiaires du projet vers √©v√©nements';
            } else if (incoh√©rence.projectStagiaires.length === 0 && incoh√©rence.eventStagiaires.length > 0) {
                // Cas 2: √âv√©nements ont des stagiaires, projet non
                stagiairesFinal = incoh√©rence.eventStagiaires;
                strat√©gieStag = 'Propager stagiaires des √©v√©nements vers projet';
            } else {
                // Cas 3: Union des deux listes
                stagiairesFinal = [...new Set([...incoh√©rence.projectStagiaires, ...incoh√©rence.eventStagiaires])];
                strat√©gieStag = 'Union des stagiaires projet + √©v√©nements';
            }
            console.log(`   üìã Strat√©gie Stagiaires: ${strat√©gieStag}`);
            console.log(`   üë• Stagiaires finaux: ${stagiairesFinal.length} stagiaire(s)`);
        } else {
            stagiairesFinal = incoh√©rence.projectStagiaires;
        }
        
        // Strat√©gie de correction LIEUX:
        let lieuFinal = '';
        let strat√©gieLieu = '';
        
        if (incoh√©rence.lieuIncoh√©rent) {
            lieuFinal = incoh√©rence.lieuFormat√©Attendu;
            strat√©gieLieu = 'Utiliser lieu format√© depuis √©v√©nements';
            console.log(`   üìã Strat√©gie Lieu: ${strat√©gieLieu}`);
            console.log(`   üè¢ Lieu final: "${lieuFinal}"`);
        } else {
            lieuFinal = incoh√©rence.projectLieu;
        }
        
        // Strat√©gie de correction P√âRIODES:
        let periodeFinal = '';
        let strat√©giePeriode = '';
        
        if (incoh√©rence.periodeIncoh√©rente) {
            periodeFinal = incoh√©rence.periodeFormat√©eAttendue;
            strat√©giePeriode = 'Utiliser p√©riode format√©e depuis √©v√©nements';
            console.log(`   üìã Strat√©gie P√©riode: ${strat√©giePeriode}`);
            console.log(`   üìÖ P√©riode finale: "${periodeFinal}"`);
        } else {
            periodeFinal = incoh√©rence.projectPeriode;
        }
        
        // Pr√©parer les mises √† jour du projet
        const projectUpdates = {};
        if (incoh√©rence.stagiaireIncoh√©rent) {
            projectUpdates.stagiaires = stagiairesFinal;
        }
        if (incoh√©rence.lieuIncoh√©rent) {
            projectUpdates.lieu_projet = lieuFinal;
        }
        if (incoh√©rence.periodeIncoh√©rente) {
            projectUpdates.periode_souhaitee = periodeFinal;
        }
        
        // Mettre √† jour le projet
        const { error: projectError } = await supabase
            .from('projects')
            .update(projectUpdates)
            .eq('id', incoh√©rence.projectId);
        
        if (projectError) {
            console.error(`   ‚ùå Erreur mise √† jour projet:`, projectError);
            continue;
        }
        
        console.log(`   ‚úÖ Projet mis √† jour avec:`, projectUpdates);
        
        // Mettre √† jour tous les √©v√©nements de formation (seulement les stagiaires, les lieux restent dans leurs √©v√©nements)
        if (incoh√©rence.stagiaireIncoh√©rent) {
            const updatePromises = incoh√©rence.events.map(async (event) => {
                const { error: eventError } = await supabase
                    .from('evenement')
                    .update({ client_user_id: stagiairesFinal })
                    .eq('id', event.id);
                
                if (eventError) {
                    console.error(`   ‚ùå Erreur mise √† jour √©v√©nement ${event.id}:`, eventError);
                    return false;
                }
                
                return true;
            });
        
            const results = await Promise.all(updatePromises);
            const successCount = results.filter(Boolean).length;
            
            console.log(`   ‚úÖ √âv√©nements mis √† jour: ${successCount}/${incoh√©rence.events.length}`);
            
            if (successCount === incoh√©rence.events.length) {
                correctionCount++;
            }
        } else {
            console.log(`   ‚ÑπÔ∏è Pas de mise √† jour d'√©v√©nements n√©cessaire (stagiaires coh√©rents)`);
            correctionCount++;
        }
    }
    
    console.log(`\n‚úÖ === CORRECTION TERMIN√âE ===`);
    console.log(`‚úÖ Projets corrig√©s: ${correctionCount}/${incoh√©rences.length}`);
    
    return correctionCount;
}

// FONCTION PRINCIPALE
async function migrerDonn√©esStagiaires() {
    console.log('üöÄ === D√âBUT DE LA MIGRATION ===');
    console.log('üìÖ Date:', new Date().toLocaleString());
    
    try {
        // √âtape 1: Analyser
        const incoh√©rences = await analyserIncoh√©rences();
        
        if (!incoh√©rences || incoh√©rences.length === 0) {
            console.log('‚úÖ Aucune incoh√©rence trouv√©e. Migration non n√©cessaire.');
            return;
        }
        
        // Demander confirmation
        console.log('\n‚ö†Ô∏è === ATTENTION ===');
        console.log('Cette migration va modifier les donn√©es de production.');
        console.log('Voulez-vous continuer? Tapez: migrerDonn√©esStagiaires.confirmer()');
        
        // Sauvegarder les incoh√©rences pour la confirmation
        window.migrationData = incoh√©rences;
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la migration:', error);
    }
}

// Fonction de confirmation
migrerDonn√©esStagiaires.confirmer = async function() {
    if (!window.migrationData) {
        console.error('‚ùå Aucune donn√©e de migration trouv√©e. Relancez migrerDonn√©esStagiaires() d\'abord.');
        return;
    }
    
    console.log('üîß Lancement de la correction...');
    
    try {
        const correctionCount = await corrigerIncoh√©rences(window.migrationData);
        
        console.log('\nüéâ === MIGRATION TERMIN√âE ===');
        console.log(`‚úÖ ${correctionCount} projet(s) corrig√©(s)`);
        console.log('üìÖ Date fin:', new Date().toLocaleString());
        
        // Nettoyer
        delete window.migrationData;
        
        // Recommander une nouvelle analyse
        console.log('\nüí° Recommandation: Relancez migrerDonn√©esStagiaires() pour v√©rifier que tout est correct.');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error);
    }
};

// Export pour usage dans la console
window.migrerDonn√©esStagiaires = migrerDonn√©esStagiaires;

console.log('üìã === SCRIPT DE MIGRATION CHARG√â ===');
console.log('üí° Pour d√©marrer la migration, tapez: migrerDonn√©esStagiaires()');